JavaScript interview questions
Source 1: https://career.guru99.com/top-85-javascript-interview-questions/
1. What is JavaScript?
JavaScript is a client-side as well as server side scripting language that can be inserted into HTML pages and is understood by web browsers. JavaScript is also an Object Oriented Programming language
2. Enumerate the differences between Java and JavaScript?
Java is a complete programming language. In contrast, JavaScript is a coded program that can be introduced to HTML pages. These two languages are not at all inter-dependent and are designed for the different intent.  Java is an object – oriented programming (OOPS) or structured programming language like C++ or C whereas JavaScript is a client-side scripting language and it is said to be unstructured programming.
3. What are JavaScript types?
Following are the JavaScript types:
•	Number
•	String
•	Boolean
•	Function
•	Object
•	Null
•	Undefined
4. What is the use of isNaN function?RRR
isNan function returns true if the argument is not a number otherwise it is false.
5. Between JavaScript and an ASP script, which is faster?RRR
JavaScript is faster. JavaScript is a client-side language and thus it does not need the assistance of the web server to execute. On the other hand, ASP is a server-side language and hence is always slower than JavaScript.  Javascript now is also a server side language (nodejs).
 
Javascript
6. What is negative infinity?AAA
Negative Infinity is a number in JavaScript which can be derived by dividing negative number by zero. 

We can use it as Number.NEGATIVE_INFINITY.

7. Is it possible to break JavaScript Code into several lines?RRR
Breaking within a string statement can be done by the use of a backslash, ‘\’, at the end of the first line
Example:
 
1	document.write("This is \a program");
And if you change to a new line when not within a string statement, then javaScript ignores break in line.


Example:
 
1
2
3
4
5	var x=1, y=2,
 
z=
 
x+y;
The above code is perfectly fine, though not advisable as it hampers debugging.
8. Which company developed JavaScript?
Netscape is the software company who developed JavaScript.
9. What are undeclared and undefined variables?RRR
Undeclared variables are those that do not exist in a program and are not declared. If the program tries to read the value of an undeclared variable, then a runtime error is encountered.
Undefined variables are those that are declared in the program but have not been given any value. If the program tries to read the value of an undefined variable, an undefined value is returned.
10. Write the code for adding new elements dynamically?RRR
 
1
2
3
4
5
6
7
8
9	<html>
<head><title>t1</title>
<script type="text/javascript">
function addNode() { var newP = document.createElement("p"); 
var textNode = document.createTextNode(" This is a new text node"); 
newP.appendChild(textNode); document.getElementById("firstP").appendChild(newP); } 
</script></head>
<body><p id="firstP">firstP<p></body>
</html>
11. What are global variables? How are these variable declared and what are the problems associated with using them?AAA
Global variables are those that are available throughout the length of the code, that is, these have no scope. The var keyword is used to declare a local variable or object. If the var keyword is omitted, a global variable is declared.
Example:
// Declare a global globalVariable = “Test”;

Global Variables are those which are decalred outside any function inside a script. When we declare it outside a function then it gets added to window oject thus can be used in all the functions. Also, if we write like window.variableName = "VariableValue" inside a function then also the variable will be provided to all the functions. 
Now, let's look at the problems related with global variables. Firstly, when we accidently creating two global variables with same name then the second global variable is overriding the value. So, this could be a big problem. Also, global varible takes more time for lookup than local varibles however the difference is negleible but exist. Lastly, it can create a namespacing problem. As global varibales are available everywhere then you might end up using a global variable instead of local variables with the same name. 

12. What is a prompt box?RRR
A prompt box is a box which allows the user to enter input by providing a text box.  Label and box will be provided to enter the text or number.
13. What is ‘this’ keyword in JavaScript?
‘This’ keyword refers to the object from where it was called.
14. Explain the working of timers in JavaScript? Also elucidate the drawbacks of using the timer, if any?RRR
Timers are used to execute a piece of code at a set time or also to repeat the code in a given interval of time. This is done by using the functions setTimeout, setInterval and clearInterval.
The setTimeout(function, delay) function is used to start a timer that calls a particular function after the mentioned delay. The setInterval(function, delay) function is used to repeatedly execute the given function in the mentioned delay and only halts when cancelled. The clearInterval(id) function instructs the timer to stop.
Timers are operated within a single thread, and thus events might queue up, waiting to be executed.
15. Which symbol is used for comments in Javascript?
// for Single line comments and
/*   Multi
Line
Comment
*/
16. What is the difference between ViewState and SessionState?RRR
‘ViewState’ is specific to a page in a session.
‘SessionState’ is specific to user specific data that can be accessed across all pages in the web application.
17. What is === operator?RRR
=== is called as strict equality operator which returns true when the two operands are having the same value without any type conversion.
18. Explain how can you submit a form using JavaScript?RRR
To submit a form using JavaScript use document.form[0].submit();


document.form[0].submit();
19. Does JavaScript support automatic type conversion?
Yes JavaScript does support automatic type conversion, it is the common way of type conversion used by JavaScript developers
20. How can the style/class of an element be changed?RRR
It can be done in the following way:
 
1	document.getElementById(“myText”).style.fontSize = “20?;
or
 
1	document.getElementById(“myText”).className = “anyclass”;
21. Explain how to read and write a file using JavaScript?AAA
There are two ways to read and write a file using JavaScript
•	Using JavaScript extensions
•	Using a web page and Active X objects (It only works with IE)

To read a file:
Fh = fopen(“filepath”)
If(fh!=-1){
	Length = flength(fh);
	String = fread(fh, length);
	Fclose(fh);
}
To write in a file:
Fh = fopen(Path and file to be created);
If(fh!=-1){
	Var string = “Text  to write in the file”;
	Fwrite(fh, str);
	Fclose(fh);
}

 22. What are all the looping structures in JavaScript?AAA
Following are looping structures in Javascript:
•	For
•	While
•	do-while loops

23. What is called Variable typing in Javascript?RRR
Variable typing is used to assign a number to a variable and the same variable can be assigned to a string.
Example
 
1
2
3	i = 10;
 
i = "string";
This is called variable typing.
24. How can you convert the string of any base to integer in JavaScript?RRR
The parseInt() function is used to convert numbers between different bases. parseInt() takes the string to be converted as its first parameter, and the second parameter is the base of the given string.
In order to convert 4F (of base 16) to integer, the code used will be –
 
1	parseInt ("4F", 16);
25. Explain the difference between “==” and “===”?
“==” checks only for equality in value whereas “===” is a stricter equality test and returns false if either the value or the type of the two variables are different.
26. What would be the result of 3+2+”7″?
Since 3 and 2 are integers, they will be added numerically. And since 7 is a string, its concatenation will be done. So the result would be 57.
27. Explain how to detect the operating system on the client machine?AAA
In order to detect the operating system on the client machine, the navigator.appVersion string (property) should be used.

For this, we should also mention that these are properties of navigator object which you have used: appName (application Name), navigator.product (browsers engine), navigator.appVersion (operating system), navigator.useragent to find the user agent header sent by browser to server and other. 

28. What do mean by NULL in Javascript?
The NULL value is used to represent no value or no object.  It implies no object or null string, no valid boolean value, no number and no array object.
29. What is the function of delete operator?AAA
The functionality of delete operator is used to delete all variables of objects in a program but it cannot delete variables declared with VAR keyword.

Delete variables can delete the properties of an object however cannot delete the variables (not the object i mean). If we want to delete a variable, then the near equivalent is to make them undefined. 

30. What is an undefined value in JavaScript?
Undefined value means the variable is declared but not yet assigned a value. 

31. What are all the types of Pop up boxes available in JavaScript?
•	Alert
•	Confirm and
•	Prompt

32. What is the use of Void(0)?AAA
Void(0) is used to prevent the page from refreshing and parameter “zero” is passed while calling.
Void(0) is used to call another method without refreshing the page.

Void() actually evaluates an expression and return true or false. void(0) returns false. If we use it in any condition then that would prevent happening that condition. But why would be ever want to stop an event? We may find a situatio like this. Let's discuss one such situation. For double Click event we have attribute "ondblclick". when we use this then we need to control what will happen if the link in click once. For controlling the single click we will need onclick event attribute. There, if we can use void(0) as the value then onclick will actually not work and double click event will work. However, we have alternative of void(0). One alternative is event.preventDefault(). 
For elaborated explaination: https://www.quackit.com/javascript/tutorial/javascript_void_0.cfm

33. How can a page be forced to load another page in JavaScript?RRR
The following code has to be inserted to achieve the desired effect:
 
1
2
3	<script language="JavaScript" type="text/javascript" >
 
<!-- location.href="http://newhost/newpath/newfile.html"; //--></script>
34. What is the data type of variables of in JavaScript?
All variables in the JavaScript are object data types.
35. What is the difference between an alert box and a confirmation box?
An alert box displays only one button which is the OK button.
But a Confirmation box displays two buttons namely OK and cancel.
36. What are escape characters?RRR
Escape characters (Backslash) is used when working with special characters like single quotes, double quotes, apostrophes and ampersands. Place backslash before the characters to make it display.
Example:
 
1
2
3	document.write "I m a "good" boy"
 
document.write "I m a \"good\" boy"
37. What are JavaScript Cookies?
Cookies are the small test files stored in a computer and it gets created when the user visits the websites to store information that they need. Example could be User Name details and shopping cart information from the previous visits.
38. Explain what is pop()method in JavaScript?
The pop() method is similar as the shift() method but the difference is that the Shift method works at the start of the array.  Also the pop() method take the last element off of the given array and returns it. The array on which is called is then altered.
Example:
var cloths = [“Shirt”, “Pant”, “TShirt”];
cloths.pop();
//Now cloth becomes Shirt,Pant
39. Whether JavaScript has concept level scope?
No. JavaScript does not have concept level scope. The variable declared inside the function has scope inside the function.
40. Mention what is the disadvantage of using innerHTML in JavaScript?AAA
If you use innerHTML in JavaScript the disadvantage is
•	Content is replaced everywhere
•	We cannot use like “appending to innerHTML”
•	Even if you use +=like “innerHTML = innerHTML + ‘html’” still the old content is replaced by html
•	The entire innerHTML content is re-parsed and build into elements, therefore its much slower
•	The innerHTML does not provide validation and therefore we can potentially insert valid and broken HTML in the document and break it

Check an exmaple of innerHTML:
<div id="mydiv">
</div>
<script>
var newHTML = "<p style=\"color:blue\">Hello World in blue</p>"
document.getElementById("mydiv").innerHTML = newHTML;
</script>

41. What is break and continue statements?
Break statement exits from the current loop.
Continue statement continues with next statement of the loop.
42. What are the two basic groups of dataypes in JavaScript?
They are as –
•	Primitive
•	Reference types.
Primitive types are number and Boolean data types. Reference types are more complex types like strings and dates.
43. How generic objects can be created?RRR
Generic objects can be created as:
 
1	var I = new object();
44. What is the use of typeof operator?AAA
‘Typeof’ is an operator which is used to return a string description of the type of a variable.

<script>
var newHTML = "<p style=\"color:blue\">Hello World in blue</p>"
document.write(typeof newHTML);
</script>

45. Which keywords are used to handle exceptions?AAA
Try… Catch—finally is used to handle exceptions in the JavaScript
 
<script>
try {
    adddlert("Welcome guest!");
}
catch(err) {
    document.getElementById("demo").innerHTML = err.message;
}
finally{
	alert("Finally block running");
}
</script>

46. Which keyword is used to print the text in the screen?
document.write(“Welcome”) is used to print the text – Welcome in the screen.
47. What is the use of blur function?AAA
Blur function is used to remove the focus from the specified object.

<script>
function getfocus() {
    document.getElementById("myAnchor").focus();
}

function losefocus() {
    document.getElementById("myAnchor").blur();
}
</script>
We need to pick the element and call blur() API. Blur() method effect will be visible only if focus is called.

48. What is variable typing?
Variable typing is used to assign a number to a variable and then assign string to the same variable. Example is as follows:
 
1
2
3	i= 8;
 
i=”john”;
49. How to find operating system in the client machine using JavaScript?
The ‘Navigator.appversion’ is used to find the name of the operating system in the client machine.

50. What are the different types of errors in JavaScript?RRR
There are three types of errors:
•	Load time errors: Errors which come up when loading a   page like improper syntax errors are known as Load time errors and it generates the errors dynamically.
•	Run time errors: Errors that come due to misuse of the command inside the HTML language.
•	Logical Errors: These are the errors that occur due to the bad logic performed on a function which is having different operation.
51. What is the use of Push method in JavaScript?RRR
The push method is used to add or append one or more elements to the end of an Array. Using this method, we can append multiple elements by passing multiple arguments
52. What is unshift method in JavaScript?RRR
Unshift method is like push method which works at the beginning of the array.  This method is used to prepend one or more elements to the beginning of the array.
53. What is the difference between JavaScript and Jscript?RRR
Both are almost similar. JavaScript is developed by Netscape and Jscript was developed by Microsoft .
 
54. How are object properties assigned?
Properties are assigned to objects in the following way –
 
1	obj["class"] = 12;
or
 
1	obj.class = 12;
55. What is the ‘Strict’ mode in JavaScript and how can it be enabled?AAA
Strict Mode adds certain compulsions to JavaScript. Under the strict mode, JavaScript shows errors for a piece of codes, which did not show an error before, but might be problematic and potentially unsafe. Strict mode also solves some mistakes that hamper the JavaScript engines to work efficiently.
Strict mode can be enabled by adding the string literal “use strict” above the file. This can be illustrated by the given example:
 
1
2
3
4
5
6
7
8
9	function myfunction()
 
{
 
“use strict";
 
var v = “This is a strict mode function";
 
}

An example where strcit mode will cause a problem are when a variable is used without declared it. It is not allowed under strict mode. We can check the exception in dev console and document.write will not print it too.  

56. What is the way to get the status of a CheckBox?
The status can be acquired as follows –
alert(document.getElementById(‘checkbox1’).checked);
If the CheckBox will be checked, this alert will return TRUE.

<form>
<input id="ch1" type="checkbox" name="Option1" onchange="checkBoxStatus(this)">Option1</input>
<input id="ch2" type="checkbox" name="Option2">Option2</input>
<input id="ch3" type="checkbox" name="Option3">Option3</input>
</form>

<script>
checkBoxStatus();
document.getElementById("p1").innerHTML = "New text!";
function checkBoxStatus(checkbox){
    if(checkbox.checked){
    	alert("Are you sure, you wanna opt ch1?");
    }else{
    	alert("Are you sure, you dont wanna opt ch1");
    }
}
</script>  

57. How can the OS of the client machine be detected?
The navigator.appVersion string can be used to detect the operating system on the client machine.
58. Explain window.onload and onDocumentReady?AAA
The onload function is not run until all the information on the page is loaded. This leads to a substantial delay before any code is executed.
onDocumentReady loads the code just after the DOM is loaded. This allows early manipulation of the code.

<script>
window.onload = function load(){
	alert("loaded");
};
</script>
Even after checking a lot, i did not find any 

59. How will you explain closures in JavaScript? When are they used?AAA
Closure is a locally declared variable related to a function which stays in memory when the function has returned.
For example:
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41	function greet(message) {
 
console.log(message);
 
}
 
function greeter(name, age) {
 
return name + " says howdy!! He is " + age + " years old";
 
}
 
// Generate the message
 
var message = greeter("James", 23);
 
// Pass it explicitly to greet
 
greet(message);
 
This function can be better represented by using closures
 
function greeter(name, age) {
 
var message = name + " says howdy!! He is " + age + " years old";
 
return function greet() {
 
console.log(message);
 
};
 
}
 
// Generate the closure
 
var JamesGreeter = greeter("James", 23);
 
// Use the closure
 
JamesGreeter();

CLosures are the functions inside functions which can access the variable of the outer function along with its own variables and global variables. Closure can be used in the situation where neither local variable not global variable can be used without a trouble. Problem of counter is a good example to understand closures. Check this for more: https://www.youtube.com/watch?v=w1s9PgtEoJs.

60. How can a value be appended to an array?
A value can be appended to an array in the given manner –
arr[arr.length] = value;
61. Explain the for-in loop?RRR
The for-in loop is used to loop through the properties of an object.
var person = {fname:"John", lname:"Doe", age:25}; 

var text = "";
var x;
for (x in person) {
    text += person[x] + " ";
} 
In each repetition, one property from the object is associated to the variable name, and the loop is continued till all the properties of the object are depleted.
62. Describe the properties of an anonymous function in JavaScript?
A function that is declared without any named identifier is known as an anonymous function. In general, an anonymous function is inaccessible after its declaration.
Anonymous function declaration –
 
1
2
3
4
5
6
7	var anon = function() {
 
alert('I am anonymous');
 
};
 
anon();
63. What is the difference between .call() and .apply()?RRR
The function .call() and .apply() are very similar in their usage except a little difference. .call() is used when the number of the function’s arguments are known to the programmer, as they have to be mentioned as arguments in the call statement. On the other hand, .apply() is used when the number is not known. The function .apply() expects the argument to be an array.
The basic difference between .call() and .apply() is in the way arguments are passed to the function. Their usage can be illustrated by the given example
var someObject = {
 
myProperty : 'Foo',
 
myMethod : function(prefix, postfix) {
 
alert(prefix + this.myProperty + postfix);
 
}
 
};
 
someObject.myMethod('<', '>'); // alerts '<Foo>'
 
var someOtherObject  = {
 
myProperty : 'Bar'
 
};
 
someObject.myMethod.call(someOtherObject, '<', '>'); // alerts '<Bar>'
someObject.myMethod.apply(someOtherObject, ['<', '>']); // alerts '<Bar>'
Generally, we use this as the first argument.

64. Define event bubbling?AAA
JavaScript allows DOM elements to be nested inside each other. In such a case, if the handler of the child is clicked, the handler of parent will also work as if it were clicked too.

By default, event bubbling is used. If at all that you want to change to event capturing then you have to pass true as the third argument for addEventListener() method. 

65. Is JavaScript case sensitive? Give an example?RRR
Yes, JavaScript is case sensitive. For example, a function parseInt is not same as the function Parseint.
66. What boolean operators can be used in JavaScript?RRR
The ‘And’ Operator (&&), ‘Or’  Operator (||) and the ‘Not’ Operator (!) can be used in JavaScript.
*Operators are without the parenthesis.
67. How can a particular frame be targeted, from a hyperlink, in JavaScript?AAA
This can be done by including the name of the required frame in the hyperlink using the ‘target’ attribute.
 
<a href=”newpage.htm”target=”newframe”>>New Page</a>

Firstly, this is more of HTML question. We have an attribute "Target" which used with anchor tag for creating hyperlink in a document. Now, when i create a hypelink that default opens in the same page which is equal to _Blank value. We can have values like _self, _Parent, _top and framename as the value for target attribute. 

68. What is the role of break and continue statements?
Break statement is used to come out of the current loop while the continue statement continues the current loop with a new recurrence.
69. Write the point of difference between web-garden and a web-farm?
Both web-garden and web-farm are web hosting systems. The only difference is that web-garden is a setup that includes many processors in a single server while web-farm is a larger setup that uses more than one server.
70. How are object properties assigned?RRR
Assigning properties to objects is done in the same way as a value is assigned to a variable. For example, a form object’s action value is assigned as ‘submit’ in the following manner – Document.form.action=”submit”
71. What is the method for reading and writing a file in JavaScript?
This can be done by Using JavaScript extensions (runs from JavaScript Editor), example for opening of a file –
 
1	fh = fopen(getScriptPath(), 0);
72. How are DOM utilized in JavaScript?
DOM stands for Document Object Model and is responsible for how various objects in a document interact with each other. DOM is required for developing web pages, which includes objects like paragraph, links, etc. These objects can be operated to include actions like add or delete. DOM is also required to add extra capabilities to a web page. On top of that, the use of API gives an advantage over other existing models.
73. How are event handlers utilized in JavaScript?
Events are the actions that result from activities, such as clicking a link or filling a form, by the user. An event handler is required to manage proper execution of all these events. Event handlers are an extra attribute of the object. This attribute includes event’s name and the action taken if the event takes place.
74. Explain the role of deferred scripts in JavaScript?AAA
By default, the parsing of the HTML code, during page loading, is paused until the script has not stopped executing. It means, if the server is slow or the script is particularly heavy, then the webpage is displayed with a delay. While using Deferred, scripts delays execution of the script till the time HTML parser is running. This reduces the loading time of web pages and they get displayed faster.

In any script that we want to defer, we can use defer keyword inside the script tag like below:
<Script defer>Scripting code<>

75. What are the various functional components in JavaScript?
The different functional components in JavaScript are-
First-class functions: Functions in JavaScript are utilized as first class objects. This usually means that these functions can be passed as arguments to other functions, returned as values from other functions, assigned to variables or can also be stored in data structures.
Nested functions: The functions, which are defined inside other functions, are called Nested functions. They are called ‘everytime’ the main function is invoked.
76. Write about the errors shown in JavaScript?AAA
JavaScript gives a message if it encounters an error. The recognized errors are –
•	Load-time errors: The errors shown at the time of the page loading are counted under Load-time errors. These errors are encountered by the use of improper syntax, and thus are detected while the page is getting loaded.
•	Run-time errors: This is the error that comes up while the program is running. It is caused by illegal operations, for example, division of a number by zero, or trying to access a non-existent area of the memory.
•	Logic errors: It is caused by the use of syntactically correct code, which does not fulfill the required task. For example, an infinite loop.

We debug the errors in javascript through developer console. red line is generally shown as the error in java script code. Under console tab, all the errors are loged.

77. What are Screen objects?
Screen objects are used to read the information from the client’s screen. The properties of screen objects are –
•	AvailHeight: Gives the height of client’s screen
•	AvailWidth: Gives the width of client’s screen.
•	ColorDepth: Gives the bit depth of images on the client’s screen
•	Height: Gives the total height of the client’s screen, including the taskbar
•	Width: Gives the total width of the client’s screen, including the taskbar
78. Explain the unshift() method ?
This method is functional at the starting of the array, unlike the push(). It adds the desired number of elements to the top of an array. For example –
 
1
2
3
4
5
6
7	var name = [ "john" ];
 
name.unshift( "charlie" );
 
name.unshift( "joseph", "Jane" );
 
console.log(name);
The output is shown below:
 
1	[" joseph "," Jane ", " charlie ", " john "]
79. Define unescape() and escape() functions?RRR
The escape () function is responsible for coding a string so as to make the transfer of the information from one computer to the other, across a network.
For Example:
 
1
2
3
4
5	<script>
 
document.write(escape(“Hello? How are you!”));
 
</script>
Output: Hello%3F%20How%20are%20you%21
The unescape() function is very important as it decodes the coded string.
It works in the following way. For example:
 
1
2
3
4
5	<script>
 
document.write(unescape(“Hello%3F%20How%20are%20you%21”));
 
</script>
Output: Hello? How are you!
80. What are the decodeURI() and encodeURI()?RRR
EncodeURl() is used to convert URL into their hex coding. And DecodeURI() is used to convert the encoded URL back to normal.
 
1
2
3

4
5
6
7
8
9	<script>
 
var uri="my test.asp?name=ståle&car=saab";
 
document.write(encodeURI(uri)+ "<br>");
 
document.write(decodeURI(uri));
 
</script>
Output –
my%20test.asp?name=st%C3%A5le&car=saab
my test.asp?name=ståle&car=saab
 81. Why it is not advised to use innerHTML in JavaScript?
innerHTML content is refreshed every time and thus is slower. There is no scope for validation in innerHTML and, therefore, it is easier to insert rouge code in the document and, thus, make the web page unstable.
82. What does the following statement declares?
 
1	var myArray = [[[]]];
It declares a three dimensional array.
83. How are JavaScript and ECMA Script related?RRR
ECMA Script are like rules and guideline while Javascript is a scripting language used for web development.
84. What is namespacing in JavaScript and how is it used?
Namespacing is used for grouping the desired functions, variables etc. under a unique name. It is a name that has been attached to the desired functions, objects and properties. This improves modularity in the coding and enables code reuse.

var yourNamespace = {

    foo: function() {
    },

    bar: function() {
    }
};

...

yourNamespace.foo();

85. How can JavaScript codes be hidden from old browsers that don’t support JavaScript?RRR
For hiding JavaScript codes from old browsers:
Add “<!–” without the quotes in the code just after the <script> tag.
Add “//–>” without the quotes in the code just before the <script> tag.
Old browsers will now treat this JavaScript code as a long HTML comment. While, a browser that supports JavaScript, will take the “<!–” and “//–>” as one-line comments.



Source 2: https://www.javatpoint.com/javascript-interview-questions
1) What is JavaScript?
JavaScript is a scripting language. It is different from Java language. It is object-based, lightweight and cross platform. It is widely used for client side validation. More details...
________________________________________
2) What is the difference between JavaScript and jscript?
Netscape provided the JavaScript language. Microsoft changed the name and called it JScript to avoid the trademark issue.In other words, you can say JScript is same as JavaScript, but it is provided by Microsoft.
________________________________________
3) How to write a hello world example of JavaScript?
A simple example of JavaScript hello world is given below. You need to place it inside the body tag of html.
1.	<script type="text/javascript">  
2.	document.write("JavaScript Hello World!");  
3.	</script>  
More details...
________________________________________
4) How to use external JavaScript file?RRR
I am assuming that js file name is message.js, place the following script tag inside the head tag.
1.	<script type="text/javascript" src="message.js"></script>  
More details...
________________________________________
5) Is JavaScript case sensitive language?
Yes.
________________________________________
6) What is BOM?RRR
BOM stands for Browser Object Model. It provides interaction with the browser. The default object of browser is window.
More Details: Browser Object Model
________________________________________
7) What is DOM? What is the use of document object?
DOM stands for Document Object Model. A document object represent the html document. It can be used to access and change the content of html.
More Details: Document Object Model
________________________________________
8) What is the use of window object?RRR
The window object is automatically created by the browser that represents a window of a browser.
It is used to display the popup dialog box such as alert dialog box, confirm dialog box, input dialog box etc.
More details...
________________________________________
9) What is the use of history object?
The history object of browser can be used to switch to history pages such as back and forward from current page or another page. There are three methods of history object.
1.	history.back()
2.	history.forward()
3.	history.go(number): number may be positive for forward, negative for backward.
More details...
________________________________________
10) How to write comment in JavaScript?
There are two types of comments in JavaScript.
1.	Single Line Comment: It is represented by // (double forward slash)
2.	Multi Line Comment: It is represented by slash with asterisk symbol as /* write comment here */
More details...
________________________________________
11) How to create function in JavaScript?
To create function in JavaScript, follow the following syntax.
1.	function function_name(){  
2.	//function body  
3.	}  
More details...
________________________________________
12) What are the JavaScript data types?
There are two types of data types in JavaScript:
1.	Primitive Data Types
2.	Non-primitive Data Types
More details...
________________________________________
13) What is the difference between == and ===?
The == operator checks equality only whereas === checks equality and data type i.e. value must be of same type.
________________________________________
14) How to write html code dynamically using JavaScript?AAA
The innerHTML property is used to write the HTML code using JavaScript dynamically. Let's see a simple example:
1.	document.getElementById('mylocation').innerHTML="<h2>This is heading using JavaScript</h2>";   
More details...

We know very well how to create element and add sub elements. But lets see how can we create an attribute and add it to an element. 
var element1 = document.createElement("p");
var attr = document.createAttribute("Class");
attr.value = "Color:Red";
element1.setAttributeNode(attr);
___________________
_____________________
15) How to write normal text code using JavaScript dynamically?RRR
The innerText property is used to write the simple text using JavaScript dynamically. Let's see a simple example:
1.	document.getElementById('mylocation').innerText="This is text using JavaScript";   
More details...
________________________________________
16) How to create objects in JavaScript?
There are 3 ways to create object in JavaScript.
1.	By object literal
2.	By creating instance of Object
3.	By Object Constructor
Let's see a simple code to create object using object literal.
1.	emp={id:102,name:"Rahul Kumar",salary:50000}   
More details...
________________________________________
17) How to create array in JavaScript?AAA
There are 3 ways to create array in JavaScript.
1.	By array literal
2.	By creating instance of Array
3.	By using an Array constructor
Let's see a simple code to create array using object literal.
1.	var emp=["Shyam","Vimal","Ratan"];    
More details...

We use [] solid brackets while creating array while curly bracktes {} while creating object.
________________________________________
18) What does the isNaN() function?
The isNan() function returns true if the variable value is not a number.
________________________________________
19) What is the output of 10+20+"30" in JavaScript?
3030 because 10+20 will be 30. If there is numeric value before and after +, it is treated is binary + (arithmetic operator).
________________________________________
20) What is the output of "10"+20+30 in JavaScript?
102030 because after a string all the + will be treated as string concatenation operator (not binary +).
________________________________________
21) Difference between Client side JavaScript and Server side JavaScript?
Client side JavaScript comprises the basic language and predefined objects which are relevant to running java script in a browser. The client side JavaScript is embedded directly by in the HTML pages. This script is interpreted by the browser at run time.
Server side JavaScript also resembles like client side java script. It has relevant java script which is to run in a server. The server side JavaScript are deployed only after compilation.
________________________________________
22) In which location cookies are stored on the hard disk?RRR
The storage of cookies on the hard disk depends on OS and the browser.
The Netscape navigator on Windows uses cookies.txt file that contains all the cookies. The path is : c:\Program Files\Netscape\Users\username\cookies.txt
The Internet Explorer stores the cookies on a file username@website.txt. The path is: c:\Windows\Cookies\username@Website.txt.
________________________________________
23) What is the real name of JavaScript?
The original name was Mocha, a name chosen by Marc Andreessen, founder of Netscape. In September of 1995, the name was changed to LiveScript. In December 1995, after receiving a trademark license from Sun, the name JavaScript was adopted.
________________________________________
24) What is the difference between undefined value and null value?
Undefined value: A value that is not defined and has no keyword is known as undefined value. For example:
1.	int number;//Here, number has undefined value.  
Null value: A value that is explicitly specified by the keyword "null" is known as null value. For example:
1.	String str=null;//Here, str has a null value.  
________________________________________
24) How to set the cursor to wait in JavaScript?AAA
The cursor can be set to wait in JavaScript by using the property "cursor". The following example illustrates the usage:
1.	<script>  
2.	window.document.body.style.cursor = "wait";   
3.	</script>  

Firstly, cursor is a javascript property which we access just like any other property "document.getElementById().style.styleName". If we keep the value as wait then we can see the loading sign which we actually mean by waiting. 
________________________________________
25) What is this?
1.	var myArray = [[[]]];  
Ans: Three dimensional array.
________________________________________
26) Are Java and JavaScript same?
No, Java and JavaScript are the two different languages. Java is a robust, secured and object-oriented programming language whereas JavaScript is a client side scripting language with some limitations.
________________________________________
27) What is negative infinity?AAA
Negative Infinity is a number in JavaScript which can be derived by dividing negative number by zero.

Infinity and -Infinity are properties to java script which shows what their name means.
________________________________________
28) What is difference between View state and Session state?RRR
"View state" is specific to a page in a session whereas "Session state" is specific to a user or browser that can be accessed across all pages in the web application.
________________________________________
29) What are the pop up boxes available in JavaScript?
o	Alert Box
o	Confirm Box
o	Prompt Box
________________________________________
30) How can we detect OS of the client machine using JavaScript?
The navigator.appVersion string can be used to detect the operating system on the client machine.
________________________________________
31) How to submit a form using JavaScript by clicking a link?AAA
Let's see the JavaScript code to submit form on clicking the link.
1.	<form name="myform" action="index.php">  
2.	Search: <input type='text' name='query' />  
3.	<a href="javascript: submitform()">Search</a>  
4.	</form>  
5.	<script type="text/javascript">  
6.	function submitform()  
7.	{  
8.	  document.myform.submit();  
9.	}  
10.	</script>  
          
Well, this can simply be done by a normal submit button. Also, if we have to do something then we can do by getting events. 
________________________________________
32) Is JavaScript faster than ASP script?
Yes, because it doesn't require web server's support for execution.
________________________________________
33) How to change the background color of HTML document using JavaScript?AAA
1.	<script type="text/javascript">  
2.	document.body.bgColor="pink";  
3.	</script>  
________________________________________
34) How to handle exceptions in JavaScript?
By the help of try/catch block, we can handle exceptions in JavaScript. JavaScript supports try, catch, finally and throw keywords for exception handling.
________________________________________
35) How to validate a form in JavaScript?AAA
Visit here: JavaScript form validation.
Create a basic form with text field, buttons, checkboxes, dropdown and date masked field. The, write the basic validation for each category of field. 
________________________________________
36) How to validate email in JavaScript?AAA
Visit here: JavaScript Email validation.
For validation email, we will use regex. Whenever we use regex in javascript then we need the test() method of object. Below is the sample code:
var StringToTest = "I hope this is an email";
var pattern = "regex pattern";
if(pattern.test(StringToTest)){
	do something if test passes;
}

Source 3: https://www.codementor.io/nihantanu/21-essential-javascript-tech-interview-practice-questions-answers-du107p62z

Question 1
1. What is the difference between undefined and not definedin JavaScript?RRR
In JavaScript, if you try to use a variable that doesn't exist and has not been declared, then JavaScript will throw an error var name is not defined and script will stop executing. However, if you use typeof undeclared_variable, then it will return undefined.
Before getting further into this, let's first understand the difference between declaration and definition.
Let's say var x is a declaration because you have not defined what value it holds yet, but you have declared its existence and the need for memory allocation.
>var x; // declaring x
>console.log(x); //output: undefined 
Here var x = 1 is both a declaration and definition (also we can say we are doing an initialisation). In the example above, the declaration and assignment of value happen inline for variable x. In JavaScript, every variable or function declaration you bring to the top of its current scope is called hoisting.
The assignment happens in order, so when we try to access a variable that is declared but not defined yet, we will get the result undefined.
var x; // Declaration
if(typeof x === 'undefined') // Will return true
If a variable that is neither declared nor defined, when we try to reference such a variable we'd get the result not defined.
>console.log(y);  // Output: ReferenceError: y is not defined
Question 2
What will be the output of the code below?
var y = 1;
if (functionf(){}) {
    y += typeof f;
  }
console.log(y);
The output would be 1undefined. The if condition statement evaluates using eval, so eval(function f(){}) returns function f(){} (which is true). Therefore, inside the if statement, executing typeof f returns undefined because the if statement code executes at run time, and the statement inside the if condition is evaluated during run time.
var k = 1;
if (1) {
eval(functionfoo(){});
    k += typeof foo;
  }
console.log(k); 
The code above will also output 1undefined.
var k = 1;
if (1) {
functionfoo(){};
    k += typeof foo;
  }
console.log(k); // output 1function
Question 3
What is the drawback of creating true private methods in JavaScript?
One of the drawbacks of creating true private methods in JavaScript is that they are very memory-inefficient, as a new copy of the method would be created for each instance.
var Employee = function (name, company, salary) {
this.name = name || "";       //Public attribute default value is null
this.company = company || ""; //Public attribute default value is null
this.salary = salary || 5000; //Public attribute default value is null

// Private method
var increaseSalary = function () {
this.salary = this.salary + 1000;
    };

// Public method
this.dispalyIncreasedSalary = function() {
        increaseSlary();
console.log(this.salary);
    };
};

// Create Employee class object
var emp1 = new Employee("John","Pluto",3000);
// Create Employee class object
var emp2 = new Employee("Merry","Pluto",2000);
// Create Employee class object
var emp3 = new Employee("Ren","Pluto",2500);
Here each instance variable emp1, emp2, emp3 has its own copy of the increaseSalaryprivate method.
So, as a recommendation, don’t use private methods unless it’s necessary.
Question 4
What is a “closure” in JavaScript? Provide an exampleRRR
A closure is a function defined inside another function (called the parent function), and has access to variables that are declared and defined in the parent function scope.
The closure has access to variables in three scopes:
•	Variables declared in their own scope
•	Variables declared in a parent function scope
•	Variables declared in the global namespace
var globalVar = "abc"; 

// Parent self invoking function 
(functionouterFunction (outerArg) { // begin of scope outerFunction
// Variable declared in outerFunction function scope 
var outerFuncVar = 'x';    
// Closure self-invoking function 
    (functioninnerFunction (innerArg) { // begin of scope innerFunction
// variable declared in innerFunction function scope
var innerFuncVar = "y"; 
console.log(          
"outerArg = " + outerArg + "\n" +
"outerFuncVar = " + outerFuncVar + "\n" +
"innerArg = " + innerArg + "\n" +
"innerFuncVar = " + innerFuncVar + "\n" +
"globalVar = " + globalVar);

    }// end of scope innerFunction)(5); // Pass 5 as parameter 
}// end of scope outerFunction )(7); // Pass 7 as parameter 
innerFunction is closure that is defined inside outerFunction and has access to all variables declared and defined in the outerFunction scope. In addition, the function defined inside another function as a closure will have access to variables declared in the global namespace.
Thus, the output of the code above would be:
outerArg = 7
outerFuncVar = x
innerArg = 5
innerFuncVar = y
globalVar = abc
Question 5
Write a mul function which will produce the following outputs when invoked:
console.log(mul(2)(3)(4)); // output : 24 
console.log(mul(4)(3)(4)); // output : 48
Below is the answer followed by an explanation to how it works:
functionmul (x) {
returnfunction (y) { // anonymous function 
returnfunction (z) { // anonymous function 
return x * y * z; 
        };
    };
}
Here the mul function accepts the first argument and returns an anonymous function, which takes the second parameter and returns another anonymous function that will take the third parameter and return the multiplication of the arguments that have been passed.
In JavaScript, a function defined inside another one has access to the outer function's variables. Therefore, a function is a first-class object that can be returned by other functions as well and be passed as an argument in another function.
•	A function is an instance of the Object type
•	A function can have properties and has a link back to its constructor method
•	A function can be stored as a variable
•	A function can be pass as a parameter to another function
•	A function can be returned from another function
Question 6
How to empty an array in JavaScript?RRR
For instance,
var arrayList =  ['a','b','c','d','e','f'];
How can we empty the array above?
There are a couple ways we can use to empty an array, so let's discuss them all.
Method 1
arrayList = []
Above code will set the variable arrayList to a new empty array. This is recommended if you don't have references to the original array arrayListanywhere else, because it will actually create a new, empty array. You should be careful with this method of emptying the array, because if you have referenced this array from another variable, then the original reference array will remain unchanged.
For Instance,
var arrayList = ['a','b','c','d','e','f']; // Created array 
var anotherArrayList = arrayList;  // Referenced arrayList by another variable 
arrayList = []; // Empty the array 
console.log(anotherArrayList); // Output ['a','b','c','d','e','f']
Method 2
arrayList.length = 0;
The code above will clear the existing array by setting its length to 0. This way of emptying the array also updates all the reference variables that point to the original array. Therefore, this method is useful when you want to update all reference variables pointing to arrayList.
For Instance,
var arrayList = ['a','b','c','d','e','f']; // Created array 
var anotherArrayList = arrayList;  // Referenced arrayList by another variable 
arrayList.length = 0; // Empty the array by setting length to 0
console.log(anotherArrayList); // Output []
Method 3
arrayList.splice(0, arrayList.length);
The implementation above will also work perfectly. This way of emptying the array will also update all the references to the original array.
var arrayList = ['a','b','c','d','e','f']; // Created array 
var anotherArrayList = arrayList;  // Referenced arrayList by another variable 
arrayList.splice(0, arrayList.length); // Empty the array by setting length to 0
console.log(anotherArrayList); // Output []
Method 4
while(arrayList.length){
  arrayList.pop();
}
The implementation above can also empty arrays, but it is usually not recommended to use this method often.
Question 7
How do you check if an object is an array or not?RRR
The best way to find out whether or not an object is an instance of a particular class is to use the toString method from Object.prototype:
var arrayList = [1,2,3];
One of the best use cases of type-checking an object is when we do method overloading in JavaScript. For example, let's say we have a method called greet, which takes one single string and also a list of strings. To make our greet method workable in both situations, we need to know what kind of parameter is being passed. Is it a single value or a list of values?
functiongreet(param){
	if(){ // here have to check whether param is array or not 
	}else{
	}
}
However, as the implementation above might not necessarily check the type for arrays, we can check for a single value string and put some array logic code in the else block. For example:
functiongreet(param){
	if(typeof param === 'string'){ 
	}else{
	// If param is of type array then this block of code would execute
	}
}
Now it's fine we can go with either of the aforementioned two implementations, but when we have a situation where the parameter can be single value, array, and object type, we will be in trouble.
Coming back to checking the type of an object, as mentioned previously we can use
Object.prototype.toString
if( Object.prototype.toString.call( arrayList ) === '[object Array]' ) {
console.log('Array!');
}
If you are using jQuery, then you can also use the jQuery isArray method:
if($.isArray(arrayList)){
console.log('Array');
}else{
	console.log('Not an array');
}
FYI, jQuery uses Object.prototype.toString.call internally to check whether an object is an array or not.
In modern browsers, you can also use
Array.isArray(arrayList);
Array.isArray is supported by Chrome 5, Firefox 4.0, IE 9, Opera 10.5 and Safari 5
Question 8
What will be the output of the following code?
var output = (function(x){
delete x;
return x;
  })(0);

console.log(output);
The output would be 0. The delete operator is used to delete properties from an object. Here x is not an object but a local variable. delete operators don't affect local variables.
Question 9
What will be the output of the following code?
var x = 1;
var output = (function(){
delete x;
return x;
  })();

console.log(output);
The output would be 1. The delete operator is used to delete the property of an object. Here x is not an object, but rather it's the global variable of type number.
Question 10
What will be the output of the code below?
var x = { foo : 1};
var output = (function(){
delete x.foo;
return x.foo;
  })();

console.log(output);
The output would be undefined. The delete operator is used to delete the property of an object. Here, x is an object which has the property foo, and as it is a self-invoking function, we will delete the foo property from object x. After doing so, when we try to reference a deleted property foo, the result isundefined.
Question 11
What will be the output of the code below?
var Employee = {
company: 'xyz'
}
var emp1 = Object.create(Employee);
delete emp1.company
console.log(emp1.company);
The output would be xyz. Here, emp1 object has company as its prototype property. The delete operator doesn't delete prototype property.
emp1 object doesn't have company as its own property. You can test it console.log(emp1.hasOwnProperty('company')); //output : false. However, we can delete the company property directly from theEmployee object using delete Employee.company. Or, we can also delete the emp1 object using the __proto__ property delete emp1.__proto__.company.
Question 12
What is undefined x 1 in JavaScript?
var trees = ["redwood","bay","cedar","oak","maple"];
delete trees[3];
When you run the code above and type console.log(trees); into your Chrome developer console, you will get
["redwood", "bay", "cedar", undefined × 1, "maple"]. When you run the code in Firefox's browser console, you will get ["redwood", "bay", "cedar", undefined, "maple"]. Thus, it's clear that the Chrome browser has its own way of displaying uninitialised indexes in arrays. However, when you check trees[3] === undefined in both browsers, you will get similar output as true.
Note: Please remember you do not need to check for the uninitialised index of array in trees[3] === 'undefined × 1', as it will give you an error. 'undefined × 1' is just way of displaying an array's uninitialised index in Chrome.
Question 13
What will be the output of the code below?
var trees = ["xyz","xxxx","test","ryan","apple"];
delete trees[3];

console.log(trees.length);
The output would be 5. When we use the delete operator to delete an array element, the array length is not affected from this. This holds even if you deleted all elements of an array using the delete operator.
In other words, when the delete operator removes an array element, that deleted element is not longer present in array. In place of value at deleted index undefined x 1 in chrome and undefined is placed at the index. If you do console.log(trees) output ["xyz", "xxxx", "test", undefined × 1, "apple"] in Chrome and in Firefox ["xyz", "xxxx", "test", undefined, "apple"].
Question 14
What will be the output of the code below?
var bar = true;
console.log(bar + 0);   
console.log(bar + "xyz");  
console.log(bar + true);  
console.log(bar + false);   
The code will output 1, "truexyz", 2, 1. Here's a general guideline for addition operators:
•	Number + Number -> Addition
•	Boolean + Number -> Addition
•	Boolean + Number -> Addition
•	Number + String -> Concatenation
•	String + Boolean -> Concatenation
•	String + String -> Concatenation
Question 15
What will be the output of the code below?
var z = 1, y = z = typeof y;
console.log(y);  
The output would be undefined. According to the associativity rule, operators with the same precedence are processed based on the associativity property of the operator. Here, the associativity of the assignment operator is Right to Left, so typeof y will evaluate first , which is undefined. It will be assigned to z, and then ywould be assigned the value of z and then z would be assigned the value 1.
Question 16
What will be the output of the code below?
// NFE (Named Function Expression 
var foo = functionbar(){ return12; };
typeof bar();  
The output would be Reference Error. To make the code above work, you can re-write it as follows:
Sample 1
var bar = function(){ return12; };
typeof bar();  
or
Sample 2
functionbar(){ return12; };
typeof bar();  
A function definition can have only one reference variable as its function name. In sample 1, bar's reference variable points to anonymous function. In sample 2, the function's definition is the name function.
var foo = functionbar(){ 
// foo is visible here 
// bar is visible here
	console.log(typeof bar()); // Work here :)
 };
// foo is visible here
// bar is undefined here
Question 17
What is the difference between the function declarations below?
var foo = function(){ 
// Some code
}; 
functionbar(){ 
// Some code
}; 
The main difference is the function foo is defined at run-time whereas function baris defined at parse time. To understand this in better way, let's take a look at the code below:
Run-Time functiondeclaration
<script>
foo(); // CallingfoofunctionherewillgiveanError
varfoo = function(){ 
console.log("Hi I am inside Foo");
 }; 
</script>
<script>
Parse-Time functiondeclaration
bar(); // CallingfoofunctionwillnotgiveanError
functionbar(){ 
console.log("Hi I am inside Foo");
 }; 
</script>
Another advantage of this first-one way of declaration is that you can declare functions based on certain conditions. For example:
<script>
if(testCondition) {// If testCondition is true then 
   var foo = function(){ 
    console.log("inside Foo with testCondition True value");
   }; 
 }else{
	 var foo = function(){ 
    console.log("inside Foo with testCondition false value");
   }; 
}
</script>
However, if you try to run similar code using the format below, you'd get an error:
<script>
if(testCondition) {// If testCondition is true then 
   function foo(){ 
    console.log("inside Foo with testCondition True value");
   }; 
 }else{
	 function foo(){ 
    console.log("inside Foo with testCondition false value");
   }; 
}
</script>
Question 18
What is function hoisting in JavaScript?RRR
Function Expression
var foo = functionfoo(){ 
	return12; 
}; 
In JavaScript, variable and functions are hoisted. Let's take function hoisting first. Basically, the JavaScript interpreter looks ahead to find all variable declarations and then hoists them to the top of the function where they're declared. For example:
foo(); // Here foo is still undefined 
var foo = functionfoo(){ 
	return12; 
}; 
Behind the scene of the code above looks like this:
var foo = undefined;
    foo(); // Here foo is undefined 
	   foo = functionfoo(){
	      / Some code stuff
      }
var foo = undefined;
	 foo = functionfoo(){
	     / Some code stuff
    }
    foo(); // Now foo is defined here
Question 19
What will be the output of code below?
var salary = "1000$";

 (function () {
console.log("Original salary was " + salary);

var salary = "5000$";

console.log("My New Salary " + salary);
})();
The output would be undefined, 5000$. Newbies often get tricked by JavaScript's hoisting concept. In the code above, you might be expecting salary to retain its value from the outer scope until the point that salary gets re-declared in the inner scope. However, due to hoisting, the salary value was undefined instead. To understand this better, have a look of the code below:
var salary = "1000$";

(function () {
var salary = undefined;
console.log("Original salary was " + salary);

    salary = "5000$";

console.log("My New Salary " + salary);
})();
salary variable is hoisted and declared at the top in the function's scope. The console.log inside returns undefined. After the console.log, salary is redeclared and assigned 5000$.
Question 20
What is the instanceof operator in JavaScript? What would be the output of the code below?RRR
functionfoo(){ 
return foo; 
}
new foo() instanceof foo;
Here, instanceof operator checks the current object and returns true if the object is of the specified type.
For Example:
var dog = new Animal();
dog instanceof Animal // Output : true
Here dog instanceof Animal is true since dog inherits from Animal.prototype.
var name = newString("xyz");
name instanceofString// Output : true
Here name instanceof String is true since dog inherits from String.prototype. Now let's understand the code below:
functionfoo(){ 
return foo; 
}
new foo() instanceof foo;
Here function foo is returning foo, which again points to function foo.
functionfoo(){
return foo; 
}
var bar = new foo();
// here bar is pointer to function foo(){return foo}.
So the new foo() instanceof foo return false;
Ref Link
Question 21
If we have a JavaScript associative array
var counterArray = {
A : 3,
	B : 4
};
counterArray["C"] = 1;
How can we calculate the length of the above associative array's counterArray?
There are no in-built functions and properties available to calculate the length of associative array object here. However, there are other ways by which we can calculate the length of an associative array object. In addition to this, we can also extend an Object by adding a method or property to the prototype in order to calculate length. However, extending an object might break enumeration in various libraries or might create cross-browser issues, so it's not recommended unless it's necessary. Again, there are various ways by which we can calculate length.
Object has the keys method which can be used to calculate the length of an object:
Object.keys(counterArray).length // Output 2 
We can also calculate the length of an object by iterating through an object and by counting the object's own property.
functiongetSize(object){
var count = 0;
for(key in object){
// hasOwnProperty method check own property of object
if(object.hasOwnProperty(key)) count++;
  }
return count;
}
We can also add a length method directly on Object:
Object.length = function(){
	var count = 0;
for(key in object){
// hasOwnProperty method check own property of object
if(object.hasOwnProperty(key)) count++;
  }
return count;
}
//Get the size of any object using
console.log(Object.length(counterArray))


Source 4: http://www.techbeamers.com/javascript-interview-questions-answers/

Q.1- What’s An Object In JavaScrpt And How Do We Create Them?
Answer.
A JavaScript object is an entity having state and behavior (properties and method). Since JavaScript is an object-based language, it treats everything as an object.
JavaScript is a template-based language not class based. It supports to create the object directly, there is no need to define a class for this.
JavaScript supports following three ways to create objects.
1. By Object Literal.
The syntax of creating an object using object literal is as follows.
JavaScript
 
1	object={property1:value1,property2:value2.....propertyN:valueN}
Here, property and value are separated by “:”.
Let’s take an example of creating an object using object literal technique.
JavaScript
 
1
2
3
4
5
6
7	<script>
 
std={id:1114,name:"Ram Bajaj",subject:"Physics"}
 
document.write(std.id+" "+std.name+" "+std.subject);
 
</script>
2. By Creating An Instance Of The Object (Using New Keyword).
The syntax of creating an object directly is as follows.
JavaScript
 
1	varobjectname=newObject();
Here, the new keyword is used to create the object.
Let’s take an example of creating an object directly.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13	<script>
 
varstd=newObject();
 
std.id=1114;
 
std.name="Ram Bajaj";
 
std.subject="Physics";
 
document.write(std.id+" "+std.name+" "+std.subject);
 
</script>
3. By Using An Object Constructor.
In this method, we create a function with arguments. The value of each of these arguments can be assigned to the current object by using this keyword.
This keyword refers to the current object.
Let’s take an example of creating an object using object constructor technique.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17	<script>
 
functionstd(id,name,subject){
 
this.id=id;
 
this.name=name;
 
this.subject=subject;
 
}
 
s=newstd(1114,"Ram Bajaj","Physics");
 
document.write(s.id+" "+s.name+" "+s.subject);
 
</script>
 
Q-2. What Is Scope In JavaScript?
Answer.
The scope determines the accessibility of variables, objects, and functions in particular part of your code.
In JavaScript, the scope is of two types.
1. Global Scope.
A variable defined outside a function comes under the Global scope. Variables defined inside the Global scope are accessible from any part of the code. Let’s see an example.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11	varname='TechBeamers';
 
console.log(name);// logs 'TechBeamers'
 
functionlogName(){
 
console.log(name);// 'name' is accessible here and everywhere else
 
}
 
logName();// logs 'TechBeamers'
2. Local Scope.
Variables defined inside a function comes under the Local scope. Different functions can use a variable with the same name. It is because these variables are strictly bound to the function that defines it (each having different scopes) and is not accessible in other functions. Let’s see an example.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22	// Global Scope
 
functionsampleFunction(){
 
    // Local Scope #1
 
    functionsample2Function(){
 
        // Local Scope #2
 
    }
}
 
// Global Scope
 
functionsample3Function(){
 
    // Local Scope #3
 
}
 
// Global Scope
 
Q-3. What Is <This> In JavaScript?
Answer.
All the prime languages use ‘this’ keyword to refer to an object that is currently instantiated by the class. However, in JavaScript, ‘this’ refers to an object which ‘owns’ the method. Though this varies, with how a function call happens.
Global Scope.
If no object is currently available, then ‘this’ represents the global object. In a web browser, ‘window’ is the top-level object which represents the document, location, history and a few other useful properties and methods. Let’s take a sample code.
JavaScript
 
1
2
3
4
5
6
7	window.Obj="I represent the window object";
 
alert(window.Obj);
 
alert(this.Obj);// I'm the window object
 
alert(window===this);// true
The Scenario Of A Function Call.
In the case of a function call, ‘this’ refers to the global object.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11	window.Obj="I represent the window object";
 
functionTestFunction(){
 
    alert(this.Obj);// I'm the window object
 
    alert(window===this);// true
 
}
 
TestFunction();
Call Object Methods.
When an object constructor or any of its methods gets called, ‘this’ refers to an instance of an object. It is similar to any class-based language.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25	window.Obj="I'm the window object";
 
functionTestFunction(){
 
    this.Obj="I'm the Test object";
 
    this.Verify1=function(){
 
        alert(this.Obj);// I'm the Test object
 
    };
 
}
 
TestFunction.prototype.Verify2=function(){
 
    alert(this.Obj);// I'm the Test object
 
};
 
vartf=newTestFunction();
 
tf.Verify1();
 
tf.Verify2();
 
Q-4. What Is Prototype Property In JavaScript?
Answer.
Every JavaScript function has a prototype property (by default this property is null), that is mainly used for implementing inheritance. We add methods and properties to a function’s prototype so that it becomes available to instances of that function. Let’s take an example that calculates the perimeter of a rectangle.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17	functionRectangle(x,y){
 
    this.x=x;
 
    this.y=y;
 
}
 
Rectangle.prototype.perimeter=function(){
 
   return2*(this.x+this.y);
 
}
 
varrect=newRectangle(4,2);
 
console.log(rect.perimeter());// outputs '12'
 
Q-5. What Is Closure In JavaScript?
Answer.
A closure is a JavaScript function defined inside another function. And that’s why it gets a special privilege to access three types of scope which are as follows.
	Internal Scope i.e. the variables defined between its curly brackets.
	Outer Function Scope i.e. the variables of the enclosing function.
	Global Scope i.e. variables defined as globals.
Please note that a closure can not only access the outer function variables but also see its parameters. But it can’t call the outer function’s arguments object. However, it can directly call the outer function’s parameters.
Here is a code example describing closure by adding a function inside another function.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11	functionouterFunc(arg1,arg2){ 
varparam="I'm closure. ";
 
// Inner function accessing outer function variables and parameters
functioninnerFunc(){ 
returnarg1+arg2+" "+param; 
}
returninnerFunc(); 
} 

outerFunc("arg1","arg2");
 
Q-6. Why Is “Self” Needed Instead Of “This” In JavaScript?
Answer.
Inner functions in JavaScript have access to all of the variables defined in the outer function. However, “this” variable is an exception. Since the nested function is just a regular function and not an object method, it’s “this” refers to the global namespace. To make it more clear, let’s look at the following example.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17	varaProperty='global';
 
varmyObject={
 
  outerFun:function(){
 
    this.aProperty='local';
 
    setTimeout(function(){
 
      console.log(this.aProperty);// outputs 'global'
 
    },1);
 
  }
 
};
Thus, we see that inside “setTimeout” function, “this” refers to the global object. We need a way to get a reference to the object, that is available inside the nested function. We assign the object from “this”, to another(non-special) variable, “self”. It is not a special variable and hence cannot be overwritten by other functions(like “this”). Thus on using “self” inside the inner function, we can refer to the local object. Following is the sample code.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17	varmyObject={
 
  outerFun:function(){
 
    varself=this;
 
    this.aProperty='local';
 
    setTimeout(function(){
 
      console.log(self.aProperty);// outputs 'local'
 
    },1);
 
  }
 
};
 
Q-7. What Is An Anonymous Function And When Should You Use It?
Answer.
Anonymous functions are functions that are dynamically declared at runtime. They’re called anonymous functions because they don’t have a name like normal functions.
We use function operator to declare an anonymous function, instead of the function declaration. Also, function operator can be used to create a new function, wherever it’s valid to put an expression. For example, we declare a new function to be supplied as an argument to a function call or to assign a property of another object.
Here’s a typical example of a named function.
JavaScript
 
1
2
3
4
5
6
7	functiontestFunction()
{
 
   alert("Welcome!!");
}
 
testFunction();
Here’s the same example created as an anonymous function.
JavaScript
 
1
2
3
4
5
6
7	vartestFunction=function()
{
 
  alert("Zoom! Zoom! Zoom!");
}
 
flyToTheMoon();
Following are the key usage of anonymous functions.
	Code brevity.
	Use them in
	Callbacks, and
	Event handlers.
	Scope management.
	They are useful in the following scenario.
	To create temporary/private scope.
	In Closures and Recursions.
 
Q-8. What Is The Difference Between “==” And “===”?
Answer.
These are the operators provided by JavaScript – strict equality and Type converting equality.
Strict equality (===) returns true if the values which it is going to compare have the same data type. Taking an example, “2” will not be equal to 2  i.e. (“2″===2) will return false.
Secondly, Type converting equality (==), automatically converts the variable to value irrespective of the data type. Taking an example, here “2” will be equal to 2  i.e. (“2″===2) will return true.
Summarizing it, double equal (==) is an autotype converting equality operator while three equals (===) is a strict equality operator, i.e. it will not convert values automatically.
 
Q-9. What Are JavaScript Data Types?RRR
Answer.
JavaScript supports three Primary, two Composite and two Special data types. Next, we list down the data types in each of the categories.
Primary Data Types.
	String
	Number
	Boolean
Composite Data Types.
	Object
	Array
Special Data Types.
	Null
	Undefined
 
Q-10. What Is Prototypal Inheritance In JavaScript?
Answer.
Most of the Object Oriented languages support classes and objects. Here, Classes inherit from other classes.
In JavaScript, the inheritance is prototype-based. This means that there are no classes. Instead, there is an object that inherits from another object.
JavaScript provides three different types of Prototypal Inheritance.
1. Delegation (I.E. The Prototype Chain).
A delegate prototype is an object that serves as a base for another object. When you inherit from a delegate prototype, the new object gets a reference to the prototype.
When we try to access any property, it first checks in the properties owned by the object. If that property does not exist there, it checks in the ‘[[Prototype]]’ and so on. If that property does not exist there, it checks in the ‘[[Prototype]]’ and so on. Gradually, it moves up the prototype chain, until it reaches the <Object.prototype> i.e. the root delegate for most of the objects.
2. Concatenative Inheritance (I.E. Mixins, Object.Assign()).
It is the process of inheriting the features of one object to another by copying the source objects properties. JavaScript calls these source prototypes by the name mixins. This process makes use of the JavaScript method Object.assign(). However, before ES6, the <.extend()> method was used.
3. Functional (Not To Be Confused With Functional Programming).
In JavaScript, a function can create an object. It’s not necessary to be a constructor(or a class). It is called a factory function. Functional inheritance produces an object from a factory and also extends it, by assigning properties.
Every type of Prototypal Inheritance supports a separate set of use-cases, applicable to it. All of them are equally useful in their ability to enable composition. It provides has-a, uses-a, or can-do relationship as compared to the is-a relationship created with class inheritance.
 
Q-11. What Is An Asynchronous Programming? Why Is It Important In JavaScript?
Answer.
In Asynchronous programming, the engine runs in an event loop. On encountering a blocking operation, a request gets fired and the code keeps running without blocking for the result. When its execution completes, and the response is ready, it fires an interrupt, which causes an event handler to be run, where the control flow continues. In this way, a single program thread can handle many concurrent operations in an asynchronous programming.
The user interface is asynchronous by nature and spends most of the time, waiting for user input to interrupt the event loop and trigger event handlers. Node is asynchronous by default. It means that the server works by waiting for a network request in a loop. Thus, it accepts more incoming requests, while the first one is getting handled.
It is important in JavaScript because it’s suitable for user interface code and beneficial for maintaining the performance on the server.
 
Q-12. What Is Variable Typing In JavaScript?
Answer.
JavaScript is very loosely typed language. It means that the variables are declared without a type. Its type is determined once a value is assigned to it. It can change as the variable appears in different contexts.
It’s in contrast to the strongly typed languages that require type declarations.
Consider the following examples.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13	/* JavaScript Example (loose typing) */
 
vara=13;// Number declaration 
 
varb="thirteen";// String declaration 
 
 
 
/* Java Example (strong typing) */
 
inta=13;// int declaration 
 
Stringb="thirteen";// String declaration 
Variable type in JavaScript is determined internally. In the above example, var ‘a’ will be of type ‘Number’ and var ‘b’ will be of type ‘String’.
 
Q-13. What Are The Different Ways To Create An Array In JavaScript?
Answer.
There are two main ways to create an array in JavaScript.
1. Using An Array Initializer (Array Literal).
The array initializer (array literal) syntax is simple. It is a comma-separated list of values in square brackets.
Let’s see some examples.
JavaScript
 
1
2
3
4
5	varmyArray1=[1,2,3,4,5]      // an array with 5 elements
 
varmyArray2=[5]              // an array with 1 element
 
varmyArray3=[true,'Hi',[7]]  // element types need not be the same.
2. Using The Array Constructor.
The Array constructor method has three different syntaxes. If we call the constructor with two or more arguments, it declares an array with array elements also initialized. If we provide only one argument to the Array constructor, it refers to the length of the new array with, elements not initialized. Lastly, the constructor without any argument creates an array with its length set to zero with elements not initialized.
Let’s see some examples.
JavaScript
 
1
2
3
4
5	varmyArray4=newArray(1,2,3,4,5)  // an array with 5 elements
 
varmyArray5=newArray(20)        // an empty array of length 20
 
varmyArray6=newArray()           // an empty array of length 0
 
Q-14. What Are JavaScript Cookies?
Answer.
A cookie is a piece of data which is sent from a website (that owns the requested web page) and gets stored locally by the browser at the user end. Cookies are needed because HTTP protocol which arranges for the transfer of web pages to your browser, is stateless. It means that HTTP has no way to keep track of the activities performed by the user at an earlier point in time. One way to resolve this issue is by using cookies. It contains following data.
	A name-value pair containing the actual data.
	An expiry date after which the cookie is no longer valid.
	The domain and path of the server it should be sent to.
When a request arrives at the server for a web page that maintains a cookie, the server appends the cookie to the HTTP header to send it across. Server side programs can then read out the information included in it and decide that you have the right to view the page or not and other user preferences.
Thus, every time you visit the site that maintains the cookies, your information is available there.
 
Q-15. Which Built-In Method Adds One Or More Elements To The End Of An Array And Returns The New Length Of The Array?
Answer.
The push() method adds one or more elements to the end of an array and returns the new length of the array.
 
Q-16. What Is The Naming Conventions For The Variables In JavaScript?
Answer.
We have to follow the below rules while naming the variables in JavaScript.
	Do not use any of the JavaScript reserved keywords as a name for your variable. For example, “break” or “boolean” are JavaScript keywords, and if used as variable names, it’s invalid.
	JavaScript variable names should not start with a numeral (0-9). It must begin with a letter or the underscore character. For example, 123var is an invalid variable name, but _123var is a valid one.
	Also, JavaScript variable names are case sensitive. For example, test and Test are two different variables.
 
Q-17. How Will You Create A Cookie Using JavaScript?RRR
Answer.
The simplest way to create a cookie is to assign a string value to the <document.cookie> object.
Its syntax is as follows.
JavaScript
 
1	document.cookie="key1 = value1; key2 = value2; expires = date";
Here, “expires” attribute is optional. We have to provide a date or time value for this attribute.
If we provide a valid value for the date or time, then the cookie will expire at the given date or time and it will not be accessible after that.
 
Q-18. How To Read A Cookie Using JavaScript?
Answer.
To read a Cookie, we have to access the value of the <document.cookie> object. This <document.cookie> string maintains a list of <name = value> pairs that is separated with semicolons.
Where,
JavaScript
 
1
2
3	"name"isthe nameofacookie and
 
"value"isits stringvalue.
We use String <split()> function to break the <document.cookie> object to sub-strings. Each of these sub-strings contains a key-value pair which represents the information related to a Cookie.
 
Q-19. How To Delete A Cookie Using JavaScript?RRR
Answer.
To delete a Cookie, we have to set its expiry date to a time that occurred in the past. If attempts are made to read a deleted Cookie then, nothing is returned.
 
Q-20. How Do You Submit A Form Using JavaScript?
Answer.
We use the following in the web page code to submit a form.
JavaScript
 
1	document.forms[0].submit();
Here <0> refers to the index of the form. If we have more than one forms on a web page, then the index for the first one will be “0”, for the second form, its value will be “1” and so on.
 
Q-21. Why Should You Not Prefer To Use Global Variables In JavaScript And How Can You Prevent It?RRR
Answer.
 
The principal issue in using a global variable is that someone else can create another variable with the same name. And you may not know it until the duplicate could overwrite the value of your variable.
To avoid using globals, follow any of the following approaches.
1. Create a single global variable that holds all your other variables.
JavaScript
 
1
2
3	varmyGlobalList={};
 
myGlobalList.first="test";
2. Enclose all of your code in a self-executing method/function so that any variable declared inside remain in the function scope.
JavaScript
 
1
2
3	(function(){
   vartest="myvar";
})();
 
Q-22. What Are The Different Objects Used In JavaScript?RRR
Answer.
JavaScript uses a hierarchical structure, applicable to all the objects created in a document. Following are the objects, used in JavaScript that shows the relationship of one object to another.
Window Object.
It is the topmost object in the hierarchy. It refers to the content area of the browser window that consists of HTML documents. Each frame is also a window that has some actions inside it.
Document Object.
A Document object represents the HTML document that the window will display. It has various properties that refer to other objects, which allow access to and modification of content in the document.
Form Object.
A form object is used to take user data as input for processing. It corresponds to an HTML input form constructed with the <FORM>…</FORM> tag.
 
Q-23. What Do We Achieve By Deferring The Loading Of JavaScript?
Answer.
During page load operation, by default, the parsing of the HTML code remains paused until the execution of the script has not stopped.
Now, if the script is heavy or the server is slow, then this will result in a delay in displaying the web page.
By deferring the loading of JavaScript, we instruct the browser to load the script, only after the loading of the web page(DOM) has finished. It reduces the loading time of the webpage, and it gets displayed faster.
In this way, it makes the page load quicker, without the average user even realizing that some JavaScript load after the DOM has loaded.
Let’s see an example.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17	<script>
 
    // this piece of code runs first
 
</script>
 
<script defer="defer">
 
    //do stuff, but defer it  (runs last)
 
</script>
 
<script>
 
    //do more stuff (runs second)
 
</script>
Here the middle block will execute once the page has loaded even though it appears before the last block.
 
Q-24. What Is Strict Mode In JavaScript?
Answer.
Strict Mode imposes a layer of constraint on JavaScript. It provides following enhancements.
	JavaScript will throw an error if we try to use the elements of a deprecated language.
	To use a variable, it has become mandatory to declare it.
	It disallows duplicate property and parameter names.
	The eval() method is safer to use, but still considered evil in some cases.
	It deprecates the “with” statement.
	JavaScript will throw an error if we try to assign a value to a read-only property.
	It decreases the global namespace pollution.
To enable strict mode, we have to add, “use strict” directive to the code. The physical location of the “strict” directive determines its scope. If used at the beginning of the js file, its scope is global. However, if we declare strict mode at the first line in the function block, its scope restricts to that function only.
 
Q.25- What Are Event Handlers In JavaScript And How To Use Them?RRR
Answer.
JavaScript event handlers are functions that bind to a specific HTML DOM event. And events are the part of HTML document object model (DOM). An event can take place in one of the following cases.
Due to user actions on a web page.
JavaScript
 
1	<onclick()>,<onmouseover()>,<onkeydown()>
Some events are callbacks triggered by the browser when a page changes its state.
JavaScript
 
1	<onload()>,<onunload()>,<onresize()>
Whenever the DOM receives an event, it calls the JavaScript event handler function bind to the event. To use a handler function, we can assign it to the desired event as an attribute of the target HTML element. Please follow the below example.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13	<HTML>
 
<BODY>
 
<FORM>
 
<INPUT TYPE=”button”VALUE=”Test”onClick=”window.alert('Event Handler')”>
 
</FORM>
 
</BODY>
 
</HTML>
 
Q-26. What Does A JavaScript Function Result When It Has No Return Statement?RRR
Answer.
If a function doesn’t use the return statement, then it returns undefined as the return value.
However, the browser won’t print anything in its console as it ignores if the expression returns an undefined value. But if we explicitly call such a function inside the console.log() method, then it’ll print exact value.
JavaScript
 
1
2
3	functiontest(){}
 
console.log(test());// will print 'undefined'
 
Q-27. What Is EncodeURI() Function?
Answer.
The encodeURI() function is used to encode a URI. This function encodes all special characters, except these < , / ? : @ & = + $ #>.
Let’s See An Example.
JavaScript
 
1
2
3
4
5	varuri="http://www.techbeamers.com/how to make a website using javaScript";
 
varencodedURI=encodeURI(uri);
 
console.log(encodedURI);
Output.
JavaScript
 
1	http://www.somedomain.com/how%20to%20make%20a%20website%20using%20javaScript
We see that JavaScript encodes the space between the words in the <uri> variable as <%20>. Thus, the encodeURI function is used to encode special reserved characters and other non-ASCII characters in the URI.
 
Q-28. How Does The <Array()> Differ From <[]> While Creating A JavaScript Array?RRR
Answer.                                                                                                                                                                          
Both the <Array()> and <[]> works almost the same in JavaScript.
If we use them as is (i.e. without any argument) to create an array object, then they will result in an array object of zero length. Also, if we pass a string or a list of strings as arguments, even then result will be similar.
However, they differ when the input argument is of integer type. In that case, the <Array(n)> statement will create an uninitialized array of size of n. Whereas, the <[n]> statement will create an array of size <1> and assign <n> as value to the first element.
 
Q-29. How Does Variable Hoisting Take Place In JavaScript?RRR
Answer.
In JavaScript, variable declarations are the first piece of code that executes irrespective of their location. Hence, it doesn’t matter whether we declare a variable at the top or anywhere else. This functionality which moves the declaration to the top either inside a function or in the global code is known as hoisting.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13	out=2;
 
varout;
 
functionmyfunc(){
 
   varin="inside"
 
   // some code
 
}
 
// ...
JavaScript will interpret the above in the following manner.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13	varout;
 
out=2;
 
functionmyfunc(){
 
    varin;
 
   // some code
     in="inside";
 
}
 
Q-30. How Will You Replace All Occurrences Of A String In JavaScript?
Answer.
We can use String’s <replace()> method to substitute any string. There are following two ways to use this method.
Pass The Input String As A Regular Expression.
JavaScript
 
1
2
3
4
5	str="ghktestlllltest-sdds"
 
str=str.replace(/test/g,'');
 
alert(str)
Use RegExp Class To Create A Regular Expression And Pass It.
JavaScript
 
1
2
3
4
5
6
7
8
9
10
11
12
13	String.prototype.replaceAll=function(find,replace){
 
    vartarget=this;
 
    returntarget.replace(newRegExp(find,'g'),replace);
 
};
 
str="ghktestlllltest-sdds"
 
str=str.replaceAll('test','');
 
alert(str)
 

Important Questions
1. How to create and add attibue for an element through javascript? setAttribute
2. problems with global variables
3. each bom object uses
