Java Script Tutorial (Source: W3 School)
Java Script is a language that is used to define the behavior of a web page. It is used along with HTML and CSS. 
Complete reference to JavaScript: http://www.w3schools.com/jsref/default.asp

Java Script Tutorial
||Introduction||
Here we will look on same very common scenarios where we can use Java Script. 
1.	We can change the HTML content. The element whose content needs to be changed on some conditions is pointed by getElementById(“ID”) function. Also, we have used a button. If we do not want to use button we can use onclick attribute in the same element and use this keyword. Like: <elementNameonClick=”this.innerHTML=Date()”>. 
2.	It can be used to change the value of the attribute. We can use this in different scenarios. Check example. 
3.	We can also use it to change the style (CSS) of the HTML document. Try an example.
4.	Java script can validate the data. This means as in the form, we can restrict the entry of some particular type of data and data entered other than that will not be taken. I have tried an example. We need to be careful with the syntax. 	
Note(s):  
1.	While using ID for pointing the element needs to be changed then we should use single quotes when double quotes are already used. We can use character or integer ID.
2.	While using the ID for pointing the element needs to be changed then we must use quotes with the ID’s, no matter character or integer. 

Where To
•	Java script can be placed in either the head or body of the HTML document in the <script> tag. We can have multiple script tags in either head or body or both. Though putting all script tags together is a good habit. 
•	We have functions in the script which are nothing but the block of code that is executed when an event occur like a button is clicked. 
•	Also, we can have external .js file containing java script. This is helpful when we have to use same script multiple times. For using external file we have to use the src attribute in the script tag. 

||Java Script Output||
We can display the output of the java script by below four ways
1.	Using window.alert() – We can display the result of the java script in the form of an alert dialog box. So, whatever we want to display should be kept in alert(). Check more examples. 
2.	Using Document.write() – This method is used only for testing purpose. When it is used, then it deletes all the HTML on the page and display only the java script result.
3.	Using InnerHTML – The inner HTML is used to define or change the content of the HTML. We use this in most of the cases. 
4.	Using Console.log – This is used to display data. We can activate the browser console through F12, and select console in the menu. It is equivalent to right click and then inspect. 

||JavaScript Syntax||
JavaScript syntax is quite similar to java. Each of its statement ends with semicolon. Each statement consist one or more of these: values, expressions, operators, keywords and comments. We have literals and variables. Literals are the fixed values while variable can vary. “var” keyword is used to declare the variables. Operators, expressions and comments are same as in Java. Identifiers are the name (like variable name). JavaScript is case sensitive like java. It also supports camel casing and Unicode character set. 

||JavaScript Statements||
The JavaScript statements together form the block/function and then the document. It is ended by semicolon. If a statement become longer than 80 characters, then it is advised to break it from an operator.  Some important keywords are break which terminates a switch or a loop, Continue is jumps the control out of a loop or at the beginning, debugger debugs the execution of the java script and calls the java debugger function. Check other important keywords as well. 

||JavaScript Comments||
These are the same as in java. Comments are meant for more readability and better understanding of the code. 

||JavaScript Variable||
JavaScript variables are for storing the data values using var keyword. We can store integer or text is the variables. Text is the character string. The names of the variable are unique and are called as identifiers. “=” is an assignment operator while “==” is an equal to operator. Declaring and assigning a var in JavaScript and again declaring it does not let the losses its value. 

||JavaScript Operator||
It has got all the operators of Java including typeOf operator which return the type of a variable. InstanceOf variable are those which returns the instance of an object type. When we add integer and string then integer before string are added while after the strings it is treated as string. 
Note: “===” means equal without any coercion. In other words, “0==flase” is true but “0===flase” is flase. This is because 0 is an integer and false is Boolean.

||JavaScript Arithmetic||
A typical thing to do with number is arithmetic. Check all the arithmetic operators and their priorities. (+, -, /, *, %,++, --)

||JavaScript Assignment||
Check all the assignment operators. (=, +=, -=, /=, *=, %=)

||JavaScript Data Types||
Java Script has String, Numbers, Boolean, Array, Object, null, undefined as the data types. For example, var x = {Name:”john”, sex:” Male”}. We can use string in single and double quotes. Also, var a = 123e3 means 123000 and var b = 123e-3 = .123. Boolean data types are var a = “true/false”. Here, arrays are special types of object so typeOf array returns an object.If we do this: var a = unidentified. This will empty the variable or the variable is declared but not assigned. Empty value has nothing to do with undefined but empty strings are different. Null means “nothing” in java script. This simply means that something does not exist.  
Note: Notice that undefined and null cannot contain value but still counted as data type. If we do typeof with a variable which is not declared then we will get data type as undefined. 

||JavaScript Functions||
•	JavaScript function is a block of code used with the function keyword. It is executed with something invokes it like some event occurs. Its syntax is “Function functionName(parameter1,parameter2,..){code to be executed}”. It is same as the method in java language.
•	 The argument passed always behaves as local variable. It can also have return keyword which returns something. Unlike methods in java language, it does not write the return value type in the signature of the functions. The purpose of having function is to use the same code multiple times and by passing different parameters. “Function” refers to an object of the function while “Function()” refers to the result of the function. 
•	We can use the function just like variables. Like, var text = the temperature is + toCelsius(77).  This is possible in java as well. 
Javascript does not check the number and type of the argument check while calling the function. Thus, if the number of argument is not sent properly then also function runs considering missing values as undefined. Also, it is good practice to check the null and provide a default values to your parameters. 
Self invoking function are those which are written or implemented in such a way that are not required to be called whereas they are slef invoked right after it is written. One possible purpose of writting the self invoking fucntion is to write the initialization work.

Note: There are three way to create a function according to the ECMA script:
1. Function Constructor: 
var functionName = new function("parameter1", "parameter2", "body");
2. Function Declaration: 
function functionName(parameter1, parameter2){body};
3. Function Expression:
var VarName = function(parameter1, parameter2){body};
The third is called as annonymous function in javascript. HOwever, we can also have named function expression which are not annonynous function. 
Now, the main question why do we have function expressions? However, are making difference? Well, one major difference between declaration and expression is they functoni declaration is hoisted while function expression aren't. So, we if we can find a special case where we do not want functoin to get called before its declared then we should use function expression. ,=



||JavaScript Object||
Let’s see the Concept of objects, properties and methods. For example, a car is an object. It will have weight and color which are its properties and methods like start and stop. We can write an object in java script like this “var car = “{type:”fiat”, model:”500”, color:”white”}”;”. The values are written in name:value pairs. Object methods are the functions. So, basically you can have an object in java script which can have properties and methods. Properties will be in Name:value pair while methods will be the functions. Then, we can access the properties of the object by “object.propertyName”. 

||JavaScript scope||
JavaScript scope is the set of variables, objects and functions you have access to. We have local and global variables in javascript. Variables written inside any function are local variable which ends when the functions completes. Variable written outside any method is global variable which ends when we move to other page. All functions of the script can use the global variable once declared. Also, if do not declares a variable but directly assign it in any function then it becomes automatically global. How? Also, all the variables in java script belongs to window object. So, “window.LocalVariable” can be used globally. Check this.
Note: 
1.	When you create any object the you can create in a syntax “var car = {modal:”1947”, brand:”suzuki”} ;”. To access the object property’s value “document.getElementById(“id”).innerHTML = ‘the car modal is ‘car.modal”. Other way could be “car[modal]”
2.	If we have to add a new property then we have to write all the previous properties again to add new ones. If we just write like “var car = {sale:yes};”. Then, only sale is yes property will be set while removing other properties. 

||JavaScript Events||
Events are the thing happened to any HTML element. JavaScript takes care of how to reach to these events. The events belong to either browser or user like the pages stops loading or button is clicked. Event occurs on element of HTML which is taken care by JavaScript functions. So, how do we connect HTML and java script. It is done like this: <someElementsomeEvent=”someJavaScriptFunction”>. For example, <p onclick=”change()”>.  Some common event attributes are onclick, onchange, onmousover, onmouseout, onkeydown, onload. Check all later. 
Note: The above you see shows adding event through HTML attribute but we can add through JS too. We have method like addEventLsitener(0 which we will study in detail. 
document.getElementById("myButton").addEventListener("click", showAlert);
function showAlert(){
	alert("Event based alert");
}

||JavaScript Strings||
•	These are used for storing and manipulating the text. We can use single or double quotes while giving value to variable. Also, we can use different quote inside the quote that surrounds the String. Length keyword gives length of the variable. Backslash escape character is used to use same quote used to assign string. For example, “var s = ‘it\’s OK’”. We already know that we should break a long statement after any operator. Also, we can break a statement from a string text through a backslash.   
•	String can also be object like this varfirstname = new String(“rishav”). Though, it is not suggested to create a string as object, it will slow down the execution.  

||JavaScript String Methods||
The JavaScript properties and methods help work with the String. For example, “Length” is a property which returns the length of the String. It has some similar method as java String has like indexOf(), lastIndexOf() (it can have multiple parameters, try it), substring(start, end), replace(“Stringpart”, “replacement”) , toUpperCase(), toLowerCase(), concat(), charAt(), charCodeAt(), split() and etc. However, java script has got some special string methods as well. Search() is same as indexOf() but far more efficient. Slice(start, end) method extracts a part of a string and create a part as a separate string. If the parameters are negative values then the counting will be done from the end. Also, if we just give a starting value then it will extract rest of the string. Substr(start, length) also extract a part of string and create a new string. However, it takes different parameter. It takes starting index and the length. It can have first parameter as negative which signifies that the counting will be done from end. Accessing a String as an array is considered unsafe. If we have to read a string then we should properly convert it into array then read it like array.
Note: Substruing and slice looks very similar as they gets us a substring of an string as a new string. But they have some distinctions which are 1) if start > stop then substirng will swap the number while slice will not, 2) If either arguments are negative or undefined then changhe it with 0 in substring but in slice, if start is negative then it starts the count from end of the string. 

||JavaScript Number||
•	JavaScript has only one type of number. It can be with or without decimals (unlike java). JavaScript numbers are 64 bit floating point. This means 64 bit is the limit and floating point indicate that it can be made decimal as well. The precision is up to 15 digit number. While decimal number can be 17 digit long. Also, Number.INFINITY and Number.NEGATIVE_INFINITY.
•	We have the facility to write the number in hexadecimal, octal and binary. “Var x = 0x12” is hexadecimal where ox shows hexadecimal. “Var x = 012” is octal since it start with zero that indicate a number being octal. Also, we can convert a number of base 10 to base 16, 8 or 2 through toString() method. 
•	Infinity is also a number which will be return if the result goes outside the largest possible number (actually a largest number possible). Also, Infinity will be given when any number divided by zero. typeOf infinity returns number.  
•	NaN (Not a Number) – NaN in javascript indicate that a value is not a number. For example, var x = 100/”apple”, then x is NaN. Also, we have isNaN() function to find out if a variable is number or not. Number can also be object if create like this: varnum = new Number(500);. We should not use this way of creating a number. 

||JavaScript Number Methods||
•	In this section, we will look at some important methods to process numbers. toString() method is used to convert a number into string. toExponential() method returns a string that round a number with exponential notation. It can take parameter to round off the number. toFixed() method is used to return a string with specified number of decimals. toPrecision() is used to return a number with specified length. valueOf() returns a number as a number. Now, we will look at converting the variables into numbers. First, Number() method which converts the variables like Boolean, date and etc into numbers. check the example. Second, parseInt() which parses a string and returns a whole number. It return only first number. Like parseInt(“10.20”/”10 20”) will return only 10. If the number cannot be converted then NaN is returned. Third, parseFlaot() which parses a string to find float. So, parseFloat(10.33) will return 10.33. 	
•	Number Properties – Some properties of number are MAX_VALUE, MIN_VALUE, NEGATIVE_VALUE, NaN, POSITIVE INFINITY and etc. 

||JavaScript Math Object||
A math object allows you to perform mathematical operations on numbers. Math object has got lots of methods. One common use is to create a random number (greater than zero and lesser than one).  Method object does not have any constructor to it is supposed to create object. Another important function is min() and max() which returns the lowest and highest values among the argument passed. Another method is round() which is used to round off a number. Floor() method is also important that round off the number to the previous value. Like floor(4.7) will return 4, but not 5. While ciel() do it in opposite way. likeciel(4.4) will return 5, but not 4. JavaScript 8 also provides some number constants. For example, it has E (Euler’s number), SQRT2 (square root of 2) and etc. We have done some methods while are many other methods as well.

||JavaScript Dates||
The date object lets to work with dates (from year to milliseconds). The date format in java script is in string like this “Tue May03 2016 10:09:59 GMT+0530 (Indian Standard Time)”. Try displaying date with Date(). We can create a Date() object through new keyword. New Date(), new Date(millisecond), new Date(dateString), and new Date(year, month, day, hours, minutes, seconds, milliseonds). We have seen how to create a new date object. Date in java script is calculated from 1st January, 1970. When specifying the date part like month in number we have to be careful. For example, the months are from 0 to 11 where 0 is for January. We can use the toUTCString() for getting time in UTC standard. Also, we have toDateFormat() which is more readable format. Date objects are static not dynamic which means that once the object is created then will show that time. If we do not mention the time zone while displaying the date then the browsers time zone will be considered. 

||JavaScript Date Formats||
•	There are generally four types of formats. First, ISO dates, Long dates, Short dates and full format. The default format is full string format which we will look in the last.  
•	ISO dates – These are in the format (YYYY-MM-DD). It can also lack day or month in the format told just now. Also, it can have format including time like this (YYYY-MM-DDTHH-MM-SS). UTC
•	JavaScript long dates – These are in the format (MMM DD YYYY) where months are in character. we can switch the order of Month and Day. Also, month can be written in full. 
•	JavaScript short dates – These are in the format (MM/DD/YYYY). Also, it can be in the format (YYYY/MM/DD). 
•	Full format dates – This is the default format. 

||JavaScript Date Methods||
•	JavaScript has got many get and set date methods. We have getDate(), getDay(), getFullYear(), getHours(), getMilliseconds(), getMinutes(), getMonths(), getSeconds(), and getTime(). These function we can use to get some part of the particular date object and for other purposes.
•	 We have corresponding set functions as well.Set() functions can be used to set the date of an object. Also, we can add days to an existing date object. 
•	Date input/ parsing dates – We have parse() method to parse a valid date string into its corresponding milliseconds. 
•	Compare Dates – Date can be compared using if condition with comparison operators. 

||JavaScript Arrays||
•	Arrays are used to store multiple values in a single variable. We should never put comma after last element since that will make the array inconsistent. We can create an array using “new” keyword but this is not appreciated. We can access and modify the element of an array using index. 
•	Objects can have different type of objects in it. Also, we can have string and integer in it. Object in the form of Name:value pair can also be accessed using the name like ArrayName.Name. 
•	JavaScript arrays do have inbuilt properties and methods. One of the properties of java script array is length which returns the length of an array. We can add a new element in an existing array by push() method or by length property. Push is easier. We can add a new element any index. We blanks will be shown when we print the array. It will add to the length as well.
•	Associative array – Array in which the values are associated with named index. However, java script does not supports this. 
•	Difference between Arrays and Objects is that the arrays only support numbered index while objects support named index. We already know that we should not create array with new keyword. We have got Array.isArray(arrayName) method which confirm that a variable is array or not. 
Doubt: check the way to print an array in java script. 

||JavaScript Arrays Method||
These methods are for working with Arrays.
•	Converting arrays to string – toString() method is used to convert the values of array as string. Also, we have join() method which is similar to the toString() but has additional parameter which act as a separator. 
•	Popping and pushing – Popping an element from an array is to take an element out of it while pushing means adding an element in the array. Try the example.
•	Shifting elements – Shift() method of the array removes the first element of an array and shifts all the elements to lower index. It returns the removed element. Unshift() method is used to add an element at the beginning of an array and shifts all the element one index higher. It returns the new length of the array. 
•	Changing and deleting the element – we can change an existing element of an array by simply putting something else at its position. For deleting an element we have delete keyword and syntax is “delete arrayName[index]”. If we use delete then it leaves a blank space thus pop or shift() is more recommended. 
•	Splice() method – This method is used to insert an element at the same time in an array. The elements are inserted and other elements are shifted accordingly. Example, splice(2, 0, “lemon”, “kiwi”). This means that insert at index 2, remove zero existing elements and put lemon and kiwi in the array. We can use to remove the element as well by adding no new element and put parameter for removing an element. It will remove from beginning of the array. 
•	Sort(), reverse(), sort() for numbers method – this method is used to sort an array. Reverse method is used to reverse the order of the element. Sorting an array with number is a bit different. We have to sort the difference of the elements of the array. 
•	Compare function – The purpose of the compare function is to define an alternative for the sort method. The compare method is “function(a,b){returns a-b};”. We can find the highest and the lowest element by getting the first element of descending and ascending sort of the element.  
•	Concate array – Concate() method is used to join two or more arrays. 
•	Slice() array – this method slice out a part of an array. Syntax: “fruits.slice(2)”. This means that the element before index three will be sliced. It can also take two arguments like slice(1,3) which means slicing will be done from first parameter while excluding the second parameter. 
•	Valueof() method – this method returns the primitive value of an object array.

||JavaScript Boolean||
JavaScript Boolean represent only two values true or false. We have Boolean() function as well which is used to check if an expression is true or false.  Boolean is the fundamental for the comparison operators and conditional statements. Also, Boolean values which are not real like zero, negative, null, unidentified, empty, NaN are false in Boolean.

||JavaScript Comparison and Logical operators||
•	Comparison operator – These are meant for comparing different values which return either true or false. It has ==, ===, !=, !==, >, <, >=, and <=. Try them in examples.  
•	Logical operator – These operators are used to defined the logic behind the variables and values. The logical operators are &&, ||, and !. We also have ternary conditional operators which involve three variables or values. Like “?” operator. 
•	Comparing different type – this is mainly related to the comparison of integers and string. Remember two things for now, when you compare a number with string containing character then the result will always be false. Second, if we compare number with string containing numbers then comparison will take care between each number from the beginning. 
•	Bit-wise operators – These operators work on 32-bit numbers. All its operands are converted to 32 bit numbers and then converted back to decimal base numbers. The bitwise operators are &, |, ~, ^, << and >>. 

||JavaScript If…Else Statements||
These are same as in Java language. 
Example:
var numberArray = [1,2,3,4,5,6,7,8];
function changeArray(){
	//numberArray.pop();
	if(numberArray.length%2==0){
		alert("length is even");
	}else{
    	alert("length is odd");
    }
}

||JavaScript Switch Statement||
The switch statements are also same as in java language. The syntax is “Switch(expression){case n: statements break; ….case m:statements break; default: default statements block}”. Break statement takes the control out of the switch statements. The default keyword indicates the default condition whose code will be executed if no case occurs. Also, the default case is not necessarily to be the last case but can come in between as well and thus we must provide break keyword to it.
<script>
var numberArray = [1,2,3,4,5,6,7,8];
function changeArray(){
	//numberArray.unshift(10);numberArray.unshift(10);
	switch(numberArray.length){
    	case 8:
        document.getElementById("result").innerText="the length is 8"
        break;
        
        case 9:
        alert("length is 9");
        break;
        
        default:
        alert("Do not know the length");
    }
}
</script>

||JavaScript For Loops||
For loops are also same in java language as in java script. Also, in case of arrays we use “<br>” break tag. This is just to take the control to the next line. Try some example. 

||JavaScript While Loop||
While loop loops through the block as long as the condition specified is true. It has a lot of similarity with for loop. Whereas do while loops the block at least once and then continues until the condition is satisfied. 

||JavaScript Break and Continue||
Break statement is used to jump out of the loop. Continue statement is used to jump over one iteration in the loop. Labels are nothing but labeling some java statements. Continue works the same with or without label while break differs in functioning when used in label statements. Break in label statements jumps out of any code block. 

||JavaScript Type Conversion||
•	These are the data types in java script which are Number, String, Boolean, object (array, Date, User defined objects) contain data while the other Null and undefined do not contain data. We can use typeof operator for finding the data type. Remember the data type of NaN is number, for array, date and null is object and undefined for undefined variable. Also, the operator does not have any data type of typeof of operators does not return anything but typeof returns string. 
•	The constructor property – value.constructor returns a constructor property which is data type function with native code. Check, what it is exactly. We can check object is array or date. Check this in detail. 
•	Conversions – To convert number to string then we have to use string(number). Same thing can be done with toString(). To convert Boolean/Date to String, we still can use String() and toString(). To convert String to number, we have Number(). Empty String are converted to 0. 
•	Convert variable to number – this can be done by unary + operator even it is not converted. Check the example. We can use Number() for Date/Boolean to number conversion. 
•	Automatic conversion – Sometimes, java script itself tries to convert the type needed. Check this in detail. 
Note: Type conbersion happends in two ways in JS. First, by using the methods like toString() and other. Seocnd, autmatically by JS.  

||Javascript Regular Expression|| 
We already know regular expression deals with creating a pattern and searching text through that pattern. Now, how do we use regular exxpression in JS? We basically has two methods which are test and exec. The basic syntax for using regex is "pattern.test(text)". We also have exce() method which works like test but returns what it found instead of boolean.
Also, couple of JS strign method search() and replace also works with regex. The syntax for using search is "string.search(pattern)". It will return the index of first match begin. Syntax for using replace is "String.reaplce(pattrn, reaplcement)". 

||Javascript Error||
We have got error object "err" which we can use to deal with errors in JS. Like java, we can use try, catch, finally blocks for working with code suspected for error. We can also use throw keyword as well. Some commn JS errors are type (try to convert a number to upperCase), reference (when a ref or var is not declared), range (when using precesion upto 500 decimal places), syntax error. Fir printing the error in catch we have e.description method. 

||JS Hoisting||
In JS, a variable can be used even before it is declared. But is this possibble? This is possible through Hoisting. Hoisting is JS default behaviour of moving all the declaration on the top of the script (if gloabl variable) or function (if local variable). Remember, JS hoists declaration but not initiaization. It is a good practice to declare all the variable at the beginning of its scope.
Also, check that in the below code a developer can make mistake,
var name = "Baggins";

(function () {
    // Outputs: "Original name was undefined"
    console.log("Original name was " + name);

    var name = "Underhill";

    // Outputs: "New name is Underhill"
    console.log("New name is " + name);
})();
In the above example, Original name is undefined because name as underhill is initializing the var which is not hoisted. Only the declaration is hoisted. 
Now, lets undrstand function hoisting. the concept is same. The function declaration is kept at top so you can call a function before writing it. 
definitionHoisted();

// TypeError: undefined is not a function
definitionNotHoisted();

function definitionHoisted() {
    console.log("Definition hoisted!");
}

var definitionNotHoisted = function () {
    console.log("Definition not hoisted!");
};
In the above example, definition hoisted works fine. However, it is not applicable for function expression like definitionNotHoisted.

note: 
1. With "use strict", JS does not allow variable if they are not declaration first.
2. If we have method and varibles names are same. Then both will be moved at the top of the scope and method declaration will override the variable declaration. Let see below case I, II, III, IV and V.
CASE I:
function a(){
//some logic
};
var a;
document.getElementById("show").innerText = typeof a  //function since both hoisted and functions overrides variable declzration
CASE II:
function a(){
//some logic
};
var a=10;
document.getElementById("show").innerText = typeof a //number, since variables initialization does not got hoisted and later a =10 we made.
CASE III:
var a = function(){
}
var a;
document.getElementById("show").innerText = typeof a //function, since var got hoisted and fucntion does not. 
CASE IV:
var a = function(){
}
var a=10;
document.getElementById("show").innerText = typeof a //number, since none got hoisted.
CASE V:
var a=10;
var a = function(){
}
document.getElementById("show").innerText = typeof a //fucntion, since none got hoisted.

Some Hoisting Related tricky questions:
Question 1
var a = 1;
function b() {
  a = 10;
  return;
  function a() {}
}
b();
console.log(a);
Output: 1
Question 2
function foo(){
    function bar() {
        return 3;
    }
    return bar();
    function bar() {
        return 8;
    }
}
alert(foo());
Output: 8
Both the bar() functions are function declarations and will therefore be hoisted to the top of foo() local scope. However, the bar() returning 8 will be hoisted after the one returning 3. Therefore, the one returning 8 will be executed.
Question 3
function parent() {
    var hoisted = "I'm a variable";
    function hoisted() {
        return "I'm a function";
    }
    return hoisted(); 
}
console.log(parent());
Output: “TypeError: hoisted is not a function”
Question 4
alert(foo());
function foo() {
  var bar = function() {
    return 3;
  };
  return bar();
  var bar = function() {
    return 8;
  };
}
Output: 3
Question 5
var myVar = 'foo';
(function() {
  console.log('Original value was: ' + myVar);
  var myVar = 'bar';
  console.log('New value is: ' + myVar);
})();
Output: “Original value was: undefined”, “New value is: bar”

||JS Strict mode||
JS strict mode is to disallow the bad syntax that works fine normally like a variable not declared and used, a function is deleted using delete keyword or parameter for function tried giving name. We can enable strict mode using "use strict" string at the beginning of an script.

||JS Best Practices||
Below are some of the best practices listed which should be kept in mind while writting JS script.
1. Avoid Global Variables
2. Always declare local variable (otherwise they will belong to global scope).
3. Declaration at the top.
4. Initialize variable when you declare them (since default value is undefined in java). 
5. Do not create variables using new keyword.
6. Beware of mistaken type conversion as JS is loosely typed language. var a = 10; a="string"; will not give any compilation error as we get in java.
7. Should use "===" for comparison rather than ==.

||JS Performance||
What should we do improve the performance of a page by writting better scripting? Below are some useful tips.
1. Reduce access to DOM
2. Avoid unnecessary variable declaration
3. Use deferred script by mentioning defer=true in script tag. 
4. Keep the looping precise by using continue and break.

||JS JSON||
JSON is a format of storing and transporting data. JSON stands for Javascript Object Notation which is very light weight for storing data. JSON is a simple text and is language independent. JSON is always written in the form of name and value pair like "name":value". JSON objects and arrays are same as javascript thus it becomes easier to convert the JSON to javascript and vice versa. For parsing JSON to JS, we have JSON.parse() API. 



JS FORMS

JS Forms
The most important use of JS in HTML form is validation of the values entered by User. Check some basic validation implementation.
Example:
<form name="myForm" action="/action_page.php" onsubmit="return validateForm()" method="post">
Name: <input type="text" name="fname">
<input type="submit" value="Submit">
</form>
<Script>
function validateForm() {
    var x = document.forms["myForm"]["fname"].value;
    if (x == "") {
        alert("Name must be filled out");
        return false;
    }
}
</script>
We also have some automatic Validation HTML keyword and attributes which are disabled, required, min, max and etc.  

JS Form API
We have some form validation API based on javascript. Couple of them are CheckValidity() which returns true if the data is valid after checking all the validation constraints in HTML is valid and setCustomValidity(). We also have some validation properties which are rangeOverflow, rangeunderflow, tooLong, typeMismatch and many other. We can use these validity properties as validity.propertyName. Try some examples. 


JS OBJECT

Object Definition
We have some primitive data type in JS which are Number, String, Boolean, Null and undefined. However, Number, String and Boolean can be an object if created using new keyword. Arrays, Dates are always object. A simple example of an object in JS through leteral way is below:
var employee = {firstName:"Rishav", LastName:"Mishra", id:"101"}; Currly braces are used to depict an object. 
Creation of object in JS through new keyword is something like below:
var employee = new employee(); 
employee.firstName="Rishav";
employee.secondName="Mishra";
employee.id="101";
JS objects are mutable which means that var x= person and x.age=10; will atually make change in the memory where person is stored and age will be 10. 

Object Properties
The name and value pairs associated with an object is known as its properties. Now, we will check how can we add, change, delete or play arond with the properties? 
adding new property to an already existing object: employee.department = "IT".
Changing a property: employee.department="ADMIN";
deleting a property: delete employee.department;

Object Methods
Property of a method could be a pair of name and a function as well like below:
employee.fullname = function(){return FirstName+LastName;}
Also, to access the above function: employee.fullname();
We also have some builtin method for all the object like toUpperCase() and other.

Object Constructor
It is same as the constructor in java to create an object. Below is an example of a constructor.
function employee(fname, lname, age, department){
  this.fname=fname;
  this.lname=lname;
  this.age=age;
  this.department=department;
}
We can create a new employee object using this constructor like: employee rishav = new employee(rishav, mishra, 25, IT);
JS gives some builtin constructors for creating string, array and other. JS also have this keyword and this() function this just works the same way as in java. 

Object Prototype
How will you add new properties and function to already existing object? Like if we have to add new properties or function to all the employees then we need to add new property to its constructor to make it visible to all. For this, we need to write the entire constructor again. This would be quite troublesome. So, we have prototype property which lets you do the same in shorter way like below:
employee.prototype.Nationality="Indian"
employee.prototype.changeName=function("changedName"){return this.name=changedName;}


JS FUNCTIONS

Function Definition
Well functions are there to perform some tasks. Firstly, how do we create function in JS? We have to two ways.
First(function expression or annonymous method): var functionName = function(){function body};
Second(Function Declaration): function functionName(){function body};
We do have a concept of function constructor but we will usually do not finds its use.
JS has the concept of variable and function hoisting due to which we can use the varibale and function before declaring them. 
We also have self invoking function means those functing are not needed to call. See the syntax below:
(function(){function body})();
Functions are also considered as object. If we do instanceOf on a function then it will return function as type. 
Note: Call() and apply() methods can be used maintly to call functions of other object. Because normal object can be called simply. 

Function Parameter
JS does not have any check on the function parameters. So, need to check the where no. of arguments are less or more than the actual parameters needed. 
In case the parameters are less then the missing parameters are taken undefined. However, we set them to default values before we actually procede with any actual logic inside our function. I am not sure what will happen if we intentionally send argument more than defined in the declaration. 
We also have a default object in JS which is argument object. You can consider this as array of argument. so, we can use it inside function. It is not necessary that we defined any parameter while defining the function. Arguments in JS are passed by value, not by reference. Just like java. Below is one exaple of argument object:
x = findMax(1, 123, 500, 115, 44, 88);
function findMax() {
    var i;
    var max = -Infinity;
    for (i = 0; i < arguments.length; i++) {
        if (arguments[i] > max) {
            max = arguments[i];
        }
    }
    return max;
}
Note: While implementing the functon its does not seems necesary to even define arguments. One example of this is above.

Function Invocation
function invocation is about calling a function. A functions runs not when its decalred but when its declaration is called. We can call a method through setting an event, or windows object or this keyword. We can also invoke a function through function constructor. 

Function Call
Functions in JS are method of object because if a function does not belong to any defiend object then it by default belongs to global object. We already know that a property of an object can be based on function. We can also use call() method to invoke any function. 

Function Apply
We can use apply() a built in function of JS to invoke functions in JS. The difference between call() and apply() is that apply takes the arguments of a method in the form of array. Each element of that is just like a set of arguments. 

Function Closures
Well, I tried understandin closure from various resouces over internet and still did not found a single statement easy definition of closure that touches the boudary of its need. I am going to give a attempt. Closure is the technique of using scope from other scope in such a way it only belong to it only. We have global scope and local scope but nothing in between. Closure gets you somhting in between. If a variable belongs to global scope then it is accessible inside a function but its not exclusively available to that function. But with closure we will get a varible for a function which is in higher scope and is exclusively for that function. Letcheck the code below:
function outer(p1, p2){
	var outerVar="result is";
	function(){
		return outerVar + (p1+p2);
	}
}
In the above code, for innner function outerVar is variable from outer scope but still is exclusive for it. Other functions cannot use. NOw, are you thinking when will you get usecase for using closure. In all those scenarios where we want a variable exclusively for a function but need it outside. An actual example for such scenario is counter problem defined in w3scool.  

JS HTML DOM

||DOM intro||
DOM stands for document object model. Through document object we can access any element or field of an HTML document and thus helps in manipulating them as needed. In HTML DOM, we can imagine the entrie document and its elements creating a tree to traverse through it. 

||DOM Methods||
Document object has many methods and properties which we will see in coming headings while one example of each is getElementById() and innerHTML as property. 

||DOM Document||
Through JS, we can create HTML, traverse through HTML document and change the HTML as well. We will see some necessary methods for doing all this. 
Methods for creating the HTML Document:
1. document.createElement(). Ex: var f = document.createElement("form");
2. document.appendChild(). Ex: f.appendChild("input");
3. document.setAttribute(). Ex: f.setAttribute("id","nameInputField");
4. document.replaceChild(). Ex: f.replaceChild("nameInputField", "a newly created element");
5. document.removeChild(). Ex: f.removeChild("nameInputField");
6. document.write(). Ex: document.write("anything"). This will print anything in the document. 
Example:
<script>
var f = document.createElement("form");
f.setAttribute('method',"post");
f.setAttribute('action',"submit.php");

var i = document.createElement("input"); //input element, text
i.setAttribute('type',"text");
i.setAttribute('name',"username");

var s = document.createElement("input"); //input element, Submit button
s.setAttribute('type',"submit");
s.setAttribute('value',"Submit");

f.appendChild(i);
f.appendChild(s);

//and some more input elements here
//and dont forget to add a submit button

document.getElementsByTagName('body')[0].appendChild(f);

</script>


Methods for Fidning the HTML element:
1. document.getElementById("id"). This will get you the element with the specified id. 
2. document.getElementByTagName("input"). This will get you all the tags of the specified type. 
3. docuemt.getElementByClassName("customCSS"). This will get you all the tags with the 

Methods for changing the captured HTML element:
1. element.innerHTML = "new HTML content". This will replace the HTML content for the selected tag(s).
2. element.attribute = "new attribute value". This will give new value to the selected attribute(s).
3. element.attribute("attribute", "value");. This is just another way of changing attribute value.
4. element.style.property = "new property". This will give new style to the older CSS. 

We will get a lot more new properties and methods in the newer version of HTML DOM level 3. 

||DOM Elements||
We have already seen three ways with which we can select the DOM elements which are getElementById(), getElementByTagName() and getElementByClassName(). If we have to select the element just the way we select in CSS, then we have a dedicated method querySelectorAll("p.class"). Here, we can mention the combination of tag and class. 

||DOM HTML||
We have already seen the way for changing the HTML. Couple of most used properties are innerHTML and attribute="new value".

||DOM CSS||
We can change the CSS, through document.getElementById("id").style.name="new value".

||DOM Animation||
will do it later.

||DOM Events||
To make our web pages more responsive, JS is a big help. We can use JS functions and properties on the basis of different events. We write events in HTML as the attribute of element Let see what all events we have in JS. 
1. onclick: If user click an element. 
2. onload: on load of the document or web page finishes. Can be used with body tag to do something immediately after page loads. 
3. onunload: on unloading page. This can happen when tag or window is closed. 
4. onchange: on the state change of an element. Generally used with check boxes, radio and other input fields. 
5. onmouseover: define the state of element when mouse is over.
6. onmouseout: defines the state of element when mouse is out. 
7. onmouseup: when mouse is kept unclicked. 
8. onmousedown: when mouse is kept clicked. 

||DOM Listener||
We have already seen one way of adding event on diiferent condition on HTM: element by adding them as the attribure of HTML. We can do this by addEventListener(event, function). One example is below:
document.getElementById(id).addEventListener("onclick", function());. This way we can add event listener in javascript. We can add multiple events to a partiular element. We can add event to window object by window.addEventListner(). We also have another method called removeEventListener("event", "function").
Event Bubbling and Event Capturing: Under event bubbing, event related to innermost element is triggered first while outermost will trigger last. In event capturing, event related to outermost element will be triggered first while last for the innermost element. 
By default, event capturing is used in java while if we have to change this to event bubbling then we have to pass true as argument in addEventListener() method. 

||DOM Navigation||
DOM also has the concept of nodes. Here, we see document as a tree and everything as a node. A node will have parent node (except root node) and will have child node (except the bottom node). We have different methods and properties through which we can access every node of a document tree. These different node properties are below:
1. parentNode: to access the parent node of a document.
2. childNodes[number of nodes]
3. firstChild
4. lastChild
5. nextSibling
6. previousSibling
To find the value, name or type of an node, first we need to reach that node and then use the peroperties nodeValue, nodeName or nodeType respectively. Here, type of node means whether element node, attribute node, Text node etc.

||DOM Node||
This explains nothing but how can we create nodes using methods like createElement(), appendChild(), replace/removeChild(). 

||DOM Collection||
When we do var x = document.getElementByTagName("div"). Then, x will hold all the div tag of that document. This means it has a collection of div tags. To access the secondTag we can use this collection just like an array in JS like y = x[1]. we can also find the number of certain tags by length property. 

||DOM NodeList||
NodeList is nothing but the list of nodes returned by method like getElementByClassName(), queryAllSeclector() and other. This is more like DOM HTML collection however, here we are returned the JS node list rather HTML elements. 


JS BOM

JS Window
Window object is the top level object in BOM below which we have docuemnt, history, screen, navigation and location. With window object, we can use some of its default methods like close(), open(), moveTo(), resizeTo() and other. InnerWidth and InnerHeight are some important properties. 

JS Screen
Screen object has some important properties which are width, heigth, availWidth, availHeight, colorDepth, pixelDepth and other. 

JS Location
Location also has got some important properties related to the URL. SOme of them are location.url which gets the current url, location.hostname, location.post, location.protocol and other. We also have some methods like location.assign() and other. 

JS History
History has got method like back() and forward()

JS Navigator
Navigator is actually a very important object because we will be using it alot. A lot of important information can be found through navigator object. These information are appName, appCodeName, app.platform, product, appVersion, userAgent and other. 

JS Popup Boxes
There are three type of popup boxes in JS. These are Alert, confirm and Prompt. We can have create them like window.alert(), window.confirm() and window.prompt("TextField Caption", "Default Text in textfield"); Check the exmaple of each. We can do a line break in alert through "\n". 

JS Timer
We can have event triggered or untriggered on the basis of time in JS as well. We can use it like window.setTimeout("myFunction", "3000"). With the timeout set, the fucntion will be called after three second of clikcing the button. To remove the set timeout, we can use the method clearTimeout(). We also have setTimeInterval(function(), n) method which is used to repeat a function after n time mentioned as the parameter. To remove the setInterval, we can use window.clearInterval(). 

JS Cookies
We can also creates cookies in JS. document.cookies="name:jhon". We will this later in more depth. 
	


Some Important Topics:
1. What is modular front end application development? 
Modularity is breaking the application into smaller pieces on the basis of functionality gives us the power to reuse the code. 
Well, this is not related to just JS but is more related to CSS and HTML. Creating application as different modules means separating the concerns and not let the code to get mixed up and become tightly coupled. I have not worked on it but ReactJs and webpack being helpful for achieving modularity. Webpack gives the feature of dependency injection. 

2. JavaScript Prototype based inheritance
Javascript does not have a concept of class. We create object through constructor. Below is one constructor created:
var Person = function(name){
	this.name=name;
	this.getName=function(){
		return this.name;
	};
}
var person1 = new Person("Rishav");
var person2 = new Person("Rishabh");
Now, in the above code we have created a constructor and two object through it. In both the objects, a copy of getName() method will get created which is not good. With inheritance, we can reuse the function without creating a copy. For this, we have to use prototype keyword. 
var Person = function(name){
	this.name=name;
}
Person.prototype.getName=function(){
		return this.name;
};
As you can see above, prototype keyword is used to add a function to the prototype person. Thus, all other object can use this method while copy for each will not be created. 

3. Practically useful abstraction: http://www.yusufaytas.com/achieving-abstraction-in-javascript/

4. Here, we will have a look on a form containing the most commonly seens field and we will also look on the JS code for accessing these elements through dom and perfomrning action related to it. 
Below is the code of the HTML page we have just created and using JS for dynamic and event based change.
<html>
	<body>
		<form name="myform" action="www.google.com" onsubmit="formValidation()">
			<h1>Front End Development three days training</h1>
			Name: <input type="text" name="employeeName"></input></br>
			How many days would you need food?</br>
			<input type="checkbox" id="ch1" onclick="whichHalf()">Day 1</input></br>
			<input type="checkbox" id="ch2" onclick="whichHalf()">Day 2</input></br>
			<input type="checkbox" id="ch3" onclick="whichHalf()">Day 3</input></br>
			<div id="radioDiv" style="display:none;">	
				Full Day:<input type="radio"></input>
				Full Day:<input type="radio"></input>
			</div>	
			Please pick your food preference:</br>
			<input type="radio" id="rdVeg" /*name="radioGroup1"*/ onclick="radioCheck()">Veg</input></br>
			<input type="radio" id="rdNonVeg" /*name="radioGroup1"*/ onclick="radioCheck()">Non Veg</input></br>
			Email:<input type="email" name="email"></input></br>
			Select your City:
			<select id="city" onchange="printCity()">
				<option value="Delhi">Delhi</option></br>
				<option value="Mumbai">Mumbai</option></br>
				<option value="Hydrabad">Hydrabad</option></br>
				<option value="Bangalore">Bangalore</option></br>
			</select></br>
			upload your photograph:<input type="file"></input></br>
			<button type="submit">Register</submit>
		</form>
		<script>
			//onclcik, onchange, onmouseover, onmouseout, onmouseup, onmousedown
		/*showing simple blank text field validation*/
			function formValidation(){
				var name = document.myform.employeeName.value;
				if(name==""){
					alert("please provide your name");
					document.myform.employeeName.focus();
				}
			}
		/*if user opts for all the days then we will ask which half*/
			function whichHalf(){
				var day1=document.getElementById("ch1");
				var day2=document.getElementById("ch2");
				var day3=document.getElementById("ch3");
				if(day1.checked==true && day2.checked==true && day3.checked==true){
					document.getElementById("radioDiv").style.display="block";
				}
			}
		/*If both radio buttons are checked then place alert.
		 However the best way it to give same name to all radio to make only one which check at a time*/
			function radioCheck(){
				var rd1 = document.getElementById("rdVeg");			
				var rd2 = document.getElementById("rdNonVeg");
				if(rd1.checked==true && rd2.checked==true){
					alert("you cannot opt for veg and non veg both");
				}
			}
		/*Confirming the city name through confirm box*/
			function printCity(){
				var cityName = document.getElementById("city").value;	
				confirm("Are you are you want to do "+cityName);
			}
		</script>
	</body>
</html>
Take Away:
a. For form validation: place form name and onsubmit="function()" in HTML and document.myform.name for capturing elements.
b. For checkboxes (util we do not find a better way): use id="ch1" in HTML and use document.getELementByID("ch1").checked=="true" in JS. 
c. For radio button: We do exactly same as checked boxed. Also, how can we make sure that only one radio button should be checked at a time? We need to give same value to the name attribute of all the radio buttons. 
d. For menu (select and option): We can specify the name or id attribute and can use document.myform.city.value or document.getElementById("cty").value to get the value.
Note: For traversing the dom to capture the elment value we can use either name attibute values of element like document.name.subname.subname.... so on or we can use document.getElementById("uniqueID").  


4. Is JavaScript an object oriented language? 
When i checked on this, i really did not find any authentic resource telling if javascript is obeject oriented language or not except the debates. On what i researched, i found javascript is an object oriented language but not on the basis class but it is prototype based OO language. We cannot create classes in javascript but we can create constructors and use prototype for creating object with same properties and functions.


Implementations
I have created this section for the sole purpose to speak about the implementation of what we have learned in this tutorial. We must use as many practical examples as we can related to the real world.  


